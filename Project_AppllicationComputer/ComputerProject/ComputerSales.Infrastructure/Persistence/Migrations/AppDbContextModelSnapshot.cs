// <auto-generated />
using System;
using ComputerSales.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ComputerSales.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ComputerSales.Domain.Entity.ECategory.Accessories", b =>
                {
                    b.Property<long>("AccessoriesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccessoriesID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AccessoriesID");

                    b.ToTable("Accessories", (string)null);
                });
            modelBuilder.Entity("ComputerSales.Domain.Entity.EOptional.OptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("OptionType", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EOptional.OptionalValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OptionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OptionTypeId", "Value")
                        .IsUnique();

                    b.ToTable("OptionalValue", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.Product", b =>
            modelBuilder.Entity("ComputerSales.Domain.Entity.EAccount.Account", b =>
                {
                    b.Property<int>("IDAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDAccount"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("IDRole")
                        .HasColumnType("int");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDAccount");

                    b.HasIndex("IDRole");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EAccount.Role", b =>
                {
                    b.Property<int>("IDRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDRole"));

                    b.Property<string>("TenRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDRole");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ECustomer.Customer", b =>
                {
                    b.Property<int>("IDCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDCustomer"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IMG")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDCustomer");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.Product", b =>
                {
                    b.Property<long>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductID"));

                    b.Property<long>("AccessoriesID")
                        .HasColumnType("bigint");

                    b.Property<long>("ProviderID")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("AccessoriesID");

                    b.HasIndex("ProviderID")
                        .IsUnique();

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductOptionType", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("OptionTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OptionTypeId");

                    b.HasIndex("OptionTypeId");

                    b.ToTable("ProductOptionType", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductOverview", b =>
                {
                    b.Property<int>("ProductOverviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductOverviewId"));

                    b.Property<int>("BlockType")
                        .HasColumnType("int");

                    b.Property<string>("Caption")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("TextContent")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("ProductOverviewId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductOverview", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductProtection", b =>
                {
                    b.Property<long>("ProtectionProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProtectionProductId"));

                    b.Property<DateTime>("DateBuy")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ProtectionProductId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductProtection", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariant", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProvider.Provider", b =>
                {
                    b.Property<long>("ProviderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProviderID"));

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ProviderID");

                    b.ToTable("Provider", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EVariant.VariantImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionImg")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantId", "SortOrder");

                    b.ToTable("VariantImage", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EVariant.VariantOptionValue", b =>
                {
                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.Property<int>("OptionalValueId")
                        .HasColumnType("int");

                    b.HasKey("VariantId", "OptionalValueId");

                    b.HasIndex("OptionalValueId");

                    b.ToTable("VariantOptionValue", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EVariant.VariantPrice", b =>
            modelBuilder.Entity("ComputerSales.Domain.Entity.EAccount.Account", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EAccount.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("IDRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("DiscountPrice")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.HasIndex("VariantId", "Status", "EffectiveFrom", "EffectiveTo");

                    b.HasIndex("VariantId", "Currency", "Status", "EffectiveFrom", "EffectiveTo");

                    b.ToTable("VariantPrice", null, t =>
                        {
                            t.HasCheckConstraint("CK_VariantPrice_FromBeforeTo", "[EffectiveFrom] < [EffectiveTo]");
                        });
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EOptional.OptionalValue", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EOptional.OptionType", "OptionType")
                        .WithMany("OptionalValues")
                        .HasForeignKey("OptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionType");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.Product", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.ECategory.Accessories", "Accessories")
                        .WithMany("Products")
                        .HasForeignKey("AccessoriesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComputerSales.Domain.Entity.EProvider.Provider", "Provider")
                        .WithMany("Products")
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accessories");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductOptionType", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EOptional.OptionType", "OptionType")
                        .WithMany("ProductOptionTypes")
                        .HasForeignKey("OptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerSales.Domain.Entity.EProduct.Product", "Product")
                        .WithMany("ProductOptionTypes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductOverview", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EProduct.Product", "Product")
                        .WithOne("ProductOverview")
                        .HasForeignKey("ComputerSales.Domain.Entity.EProduct.ProductOverview", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductProtection", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EProduct.Product", "Product")
                        .WithOne("ProductProtection")
                        .HasForeignKey("ComputerSales.Domain.Entity.EProduct.ProductProtection", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductVariant", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EProduct.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EVariant.VariantImage", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EProduct.ProductVariant", "Variant")
                        .WithMany("VariantImages")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EVariant.VariantOptionValue", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EOptional.OptionalValue", "OptionalValue")
                        .WithMany("VariantOptionValues")
                        .HasForeignKey("OptionalValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerSales.Domain.Entity.EProduct.ProductVariant", "Variant")
                        .WithMany("VariantOptionValues")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionalValue");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EVariant.VariantPrice", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EProduct.ProductVariant", "Variant")
                        .WithMany("VariantPrices")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ECategory.Accessories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EOptional.OptionType", b =>
                {
                    b.Navigation("OptionalValues");

                    b.Navigation("ProductOptionTypes");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EOptional.OptionalValue", b =>
                {
                    b.Navigation("VariantOptionValues");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.Product", b =>
                {
                    b.Navigation("ProductOptionTypes");

                    b.Navigation("ProductOverview");

                    b.Navigation("ProductProtection");

                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductVariant", b =>
                {
                    b.Navigation("VariantImages");

                    b.Navigation("VariantOptionValues");

                    b.Navigation("VariantPrices");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProvider.Provider", b =>
            modelBuilder.Entity("ComputerSales.Domain.Entity.EAccount.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.Provider", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
