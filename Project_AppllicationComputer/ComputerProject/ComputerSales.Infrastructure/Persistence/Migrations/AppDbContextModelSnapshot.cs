// <auto-generated />
using System;
using ComputerSales.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ComputerSales.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ComputerSales.Domain.Entity.Account", b =>
                {
                    b.Property<int>("IDAccount")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasDefaultValueSql("('User_' + CAST(NEXT VALUE FOR [AccountSeq] AS varchar(20)))");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("IDRole")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LockoutUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("VerifyKeyExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("VerifySendCountDate")
                        .HasColumnType("date");

                    b.Property<int>("VerifySendCountToday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("IDAccount");

                    b.HasIndex("IDRole");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EAccount.EmailVerifyKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasMaxLength(88)
                        .HasColumnType("nvarchar(88)");

                    b.Property<bool>("Used")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("AccountId", "KeyHash")
                        .IsUnique();

                    b.ToTable("EmailVerifyKeys");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EAccount.Role", b =>
                {
                    b.Property<int>("IDRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDRole"));

                    b.Property<string>("TenRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDRole");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ECart.Cart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal>("DiscountTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("ExpiresAT")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GrandTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[Subtotal]-[DiscountTotal]+[ShippingFee]", true);

                    b.Property<decimal>("ShippingFee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("Subtotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID", "Status")
                        .HasDatabaseName("IX_Cart_User_Status");

                    b.ToTable("Cart", null, t =>
                        {
                            t.HasCheckConstraint("CK_Cart_Discount_NonNegative", "[DiscountTotal] >= 0");

                            t.HasCheckConstraint("CK_Cart_Shipping_NonNegative", "[ShippingFee] >= 0");

                            t.HasCheckConstraint("CK_Cart_Subtotal_NonNegative", "[Subtotal] >= 0");
                        });
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ECart.CartItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CartID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsSelected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OptionSummary")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ParentItemID")
                        .HasColumnType("int");

                    b.Property<int?>("PerItemLimit")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductVariantID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("ID");

                    b.HasIndex("CartID")
                        .HasDatabaseName("IX_CartItem_CartID");

                    b.HasIndex("ParentItemID")
                        .HasDatabaseName("IX_CartItem_ParentItemID");

                    b.HasIndex("ProductVariantID")
                        .HasDatabaseName("IX_CartItem_ProductVariantID");

                    b.HasIndex("SKU")
                        .HasDatabaseName("IX_CartItem_SKU");

                    b.ToTable("CartItem", null, t =>
                        {
                            t.HasCheckConstraint("CK_CartItem_Quantity_Positive", "[Quantity] > 0");

                            t.HasCheckConstraint("CK_CartItem_UnitPrice_NonNegative", "[UnitPrice] >= 0");
                        });
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ECart.CartPromotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AppliedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CartID")
                        .HasColumnType("int");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartID");

                    b.HasIndex("PromotionId");

                    b.ToTable("CartPromotions");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ECart.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ECategory.Accessories", b =>
                {
                    b.Property<long>("AccessoriesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccessoriesID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AccessoriesID");

                    b.ToTable("Accessories", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ECustomer.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCustomer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("IDAccount")
                        .HasColumnType("int");

                    b.Property<string>("IMG")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("sdt")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("CustomerID");

                    b.HasIndex("IDAccount")
                        .IsUnique();

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EOptional.OptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("OptionType", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EOptional.OptionalValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OptionTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OptionTypeId", "Value")
                        .IsUnique();

                    b.ToTable("OptionalValue", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EPayment.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PaymentID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("PaymentMethod", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentID = 1,
                            Code = "COD",
                            IsActive = true,
                            Name = "Cash on Delivery"
                        },
                        new
                        {
                            PaymentID = 2,
                            Code = "ZALOPAY",
                            IsActive = true,
                            Name = "ZaloPay"
                        });
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.Product", b =>
                {
                    b.Property<long>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductID"));

                    b.Property<long>("AccessoriesID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("ProviderID")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("ProductID");

                    b.HasIndex("AccessoriesID");

                    b.HasIndex("SKU")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("ProviderID", "AccessoriesID", "Status");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductOptionType", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("OptionTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OptionTypeId");

                    b.HasIndex("OptionTypeId");

                    b.ToTable("ProductOptionType", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductOverview", b =>
                {
                    b.Property<int>("ProductOverviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductOverviewId"));

                    b.Property<int>("BlockType")
                        .HasColumnType("int");

                    b.Property<string>("Caption")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("TextContent")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("ProductOverviewId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductOverview", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductProtection", b =>
                {
                    b.Property<long>("ProtectionProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProtectionProductId"));

                    b.Property<DateTime>("DateBuy")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ProtectionProductId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductProtection", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VariantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariant", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProvider.Provider", b =>
                {
                    b.Property<long>("ProviderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProviderID"));

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ProviderID");

                    b.ToTable("Provider", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ERefreshToken.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EVariant.VariantImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionImg")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantId", "SortOrder");

                    b.ToTable("VariantImage", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EVariant.VariantOptionValue", b =>
                {
                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.Property<int>("OptionalValueId")
                        .HasColumnType("int");

                    b.HasKey("VariantId", "OptionalValueId");

                    b.HasIndex("OptionalValueId");

                    b.ToTable("VariantOptionValue", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EVariant.VariantPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("DiscountPrice")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.HasIndex("VariantId", "Status", "ValidFrom", "ValidTo");

                    b.HasIndex("VariantId", "Currency", "Status", "ValidFrom", "ValidTo");

                    b.ToTable("VariantPrice", null, t =>
                        {
                            t.HasCheckConstraint("CK_VariantPrice_FromBeforeTo", "[EffectiveFrom] < [EffectiveTo]");
                        });
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.E_Order.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<decimal>("DiscountTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GrandTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[Subtotal] - [DiscountTotal] + [ShippingFee]", true);

                    b.Property<int>("IDCustomer")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("OrderNote")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentID")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<decimal>("ShippingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.HasIndex("IDCustomer");

                    b.HasIndex("PaymentID");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.E_Order.OrderDetail", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantID")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OptionSummary")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("ProductID")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[UnitPrice] - [Discount] * [Quantity]", true);

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID", "ProductVariantID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ProductVariantID");

                    b.HasIndex("SKU");

                    b.ToTable("OrderDetails", (string)null);
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.Account", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EAccount.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("IDRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EAccount.EmailVerifyKey", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ECart.CartItem", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.ECart.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerSales.Domain.Entity.ECart.CartItem", "ParentItem")
                        .WithMany("Children")
                        .HasForeignKey("ParentItemID");

                    b.Navigation("Cart");

                    b.Navigation("ParentItem");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ECart.CartPromotion", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.ECart.Cart", "Cart")
                        .WithMany("Promotions")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerSales.Domain.Entity.ECart.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ECustomer.Customer", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("ComputerSales.Domain.Entity.ECustomer.Customer", "IDAccount")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EOptional.OptionalValue", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EOptional.OptionType", "OptionType")
                        .WithMany("OptionalValues")
                        .HasForeignKey("OptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionType");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.Product", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.ECategory.Accessories", "Accessories")
                        .WithMany("Products")
                        .HasForeignKey("AccessoriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerSales.Domain.Entity.EProvider.Provider", "Provider")
                        .WithMany("Products")
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accessories");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductOptionType", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EOptional.OptionType", "OptionType")
                        .WithMany("ProductOptionTypes")
                        .HasForeignKey("OptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerSales.Domain.Entity.EProduct.Product", "Product")
                        .WithMany("ProductOptionTypes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductOverview", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EProduct.Product", "Product")
                        .WithOne("ProductOverview")
                        .HasForeignKey("ComputerSales.Domain.Entity.EProduct.ProductOverview", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductProtection", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EProduct.Product", "Product")
                        .WithOne("ProductProtection")
                        .HasForeignKey("ComputerSales.Domain.Entity.EProduct.ProductProtection", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductVariant", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EProduct.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ERefreshToken.RefreshToken", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EVariant.VariantImage", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EProduct.ProductVariant", "Variant")
                        .WithMany("VariantImages")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EVariant.VariantOptionValue", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EOptional.OptionalValue", "OptionalValue")
                        .WithMany("VariantOptionValues")
                        .HasForeignKey("OptionalValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerSales.Domain.Entity.EProduct.ProductVariant", "Variant")
                        .WithMany("VariantOptionValues")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionalValue");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EVariant.VariantPrice", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.EProduct.ProductVariant", "Variant")
                        .WithMany("VariantPrices")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.E_Order.Order", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.ECustomer.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("IDCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Customer_CustomerID");

                    b.HasOne("ComputerSales.Domain.Entity.EPayment.PaymentMethod", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Order_PaymentMethod_PaymentID");

                    b.Navigation("Customer");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.E_Order.OrderDetail", b =>
                {
                    b.HasOne("ComputerSales.Domain.Entity.E_Order.Order", "Order")
                        .WithMany("Details")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerSales.Domain.Entity.EProduct.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ComputerSales.Domain.Entity.EProduct.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.Account", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EAccount.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ECart.Cart", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ECart.CartItem", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ECategory.Accessories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.ECustomer.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EOptional.OptionType", b =>
                {
                    b.Navigation("OptionalValues");

                    b.Navigation("ProductOptionTypes");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EOptional.OptionalValue", b =>
                {
                    b.Navigation("VariantOptionValues");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EPayment.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.Product", b =>
                {
                    b.Navigation("ProductOptionTypes");

                    b.Navigation("ProductOverview");

                    b.Navigation("ProductProtection");

                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProduct.ProductVariant", b =>
                {
                    b.Navigation("VariantImages");

                    b.Navigation("VariantOptionValues");

                    b.Navigation("VariantPrices");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.EProvider.Provider", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ComputerSales.Domain.Entity.E_Order.Order", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
