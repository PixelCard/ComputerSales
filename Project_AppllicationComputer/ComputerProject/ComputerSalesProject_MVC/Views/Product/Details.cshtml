@model ProductDetailViewModel
@{
    ViewData["Title"] = Model.Title;

    var bullets = (Model.OverviewText ?? "")
        .Split(new[] { "\r\n", "\n" }, StringSplitOptions.RemoveEmptyEntries)
        .Take(8).ToList();
}
<script src="https://cdn.tailwindcss.com"></script>

<main class="max-w-[1320px] xl:max-w-[1400px] mx-auto px-3 lg:px-4 py-6">

    <!-- Breadcrumb -->
    <nav class="text-sm text-gray-500 mb-3 flex items-center gap-1">
        <svg class="w-4 h-4 text-gray-400" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M10.707 2.293a1 1 0 0 0-1.414 0L2.586 9H1a1 1 0 1 0 0 2h1v9a2 2 0 0 0 2 2h6v-7h4v7h6a2 2 0 0 0 2-2v-9h1a1 1 0 1 0 0-2h-1.586l-6.707-6.707a1 1 0 0 0-1.414 0L12 3.586l-1.293-1.293Z" /></svg>
        <a href="/" class="hover:underline">Home</a>
        <span>›</span>
        <a href="/gaming" class="hover:underline">Gaming & VR</a>
        <span>›</span>
        <a href="/gaming/monitors" class="hover:underline">Gaming Monitor</a>
        <span>›</span>
        <span class="text-gray-700 truncate" title="@Model.Title">@Model.Title</span>
    </nav>

    <!-- 3 COLUMNS -->
    <section class="grid grid-cols-1 lg:grid-cols-12 gap-6 items-start">

        <!-- LEFT: Gallery -->
        <div class="col-span-1 lg:col-span-6">
            <div class="bg-white rounded-2xl p-4 shadow">
                <div class="aspect-[16/10] bg-white rounded-xl overflow-hidden flex items-center justify-center border">
                    <img id="mainImg"
                         src="@(Model.Images?.FirstOrDefault() ?? "/images/placeholder.svg")"
                         class="max-h-[70vh] w-auto object-contain" alt="@Model.Title" />
                </div>
                <div id="thumbs" class="mt-3 flex flex-wrap gap-2"></div>
            </div>
        </div>

        <!-- MIDDLE: Info -->
        <div class="col-span-1 lg:col-span-3">
            <div class="bg-white rounded-2xl p-4 sm:p-5 shadow">
                <div class="flex items-center gap-2 mb-1">
                    <img src="https://upload.wikimedia.org/wikipedia/commons/2/2f/ASUS_Logo.svg" class="h-5 w-auto" alt="brand" />
                    <a class="text-blue-700 text-sm font-semibold hover:underline inline-flex items-center gap-1" href="#">
                        <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M3 6a3 3 0 0 1 3-3h5l2 2h5a3 3 0 0 1 3 3v1H3V6Z" /><path d="M3 10h18v7a3 3 0 0 1-3 3H6a3 3 0 0 1-3-3v-7Z" /></svg>
                        Shop All ASUS ROG
                    </a>
                </div>

                <h1 class="text-2xl font-bold leading-snug">@Model.Title</h1>

                @if (Model.Variants?.Any() == true)
                {
                    <div class="mt-3">
                        <div class="text-sm font-medium mb-2">Chọn phiên bản</div>
                        <div class="flex flex-wrap gap-2">
                            @foreach (var v in Model.Variants)
                            {
                                <button type="button"
                                        class="px-3 py-2 rounded-lg border text-sm bg-white
                                               hover:border-blue-500 hover:bg-blue-50 transition
                                               @(Model.VariantId == v.VariantId ? "border-blue-600 ring-2 ring-blue-200" : "border-gray-300")"
                                        data-variant-id="@v.VariantId"
                                        data-variant-price="@v.Price"
                                        data-variant-old-price="@(v.OldPrice?.ToString() ?? "")"
                                        onclick="selectVariant(this)">
                                    @v.SKU
                                </button>
                            }
                        </div>
                    </div>
                }

                <div id="optionsWrap" class="mt-4">
                    @if (Model.OptionGroups?.Any() == true)
                    {
                        @foreach (var group in Model.OptionGroups)
                        {
                            var isAddOn = string.Equals(group.Name, "Add-on", StringComparison.OrdinalIgnoreCase)
                            || string.Equals(group.Name, "Optional", StringComparison.OrdinalIgnoreCase);

                            <div class="mt-3">
                                <div class="text-sm font-medium mb-1">@group.Name</div>
                                <div class="flex gap-2 flex-wrap">
                                    @foreach (var item in group.Items)
                                    {
                                        <button type="button"
                                           class="px-3 py-1 border rounded-lg text-sm hover:bg-blue-50 transition
                                                @(item.Disabled ? "opacity-50 cursor-not-allowed text-gray-400 border-gray-300" : "border-gray-300")
                                                @(item.Selected ? "border-blue-600 bg-blue-50" : "")"
                                                      data-option-group="@group.Name"
                                                      data-option-label="@item.Label"
                                                      data-option-price="@item.Price"
                                                      @(group.IsAddOn
                                                      ? new Microsoft.AspNetCore.Html.HtmlString($"data-optional-id=\"{item.Id}\"")
                                                        : new Microsoft.AspNetCore.Html.HtmlString($"data-option-id=\"{item.Id}\""))
                                                      onclick="@(item.Disabled ? "" : $"selectOption(this, '{group.Name}', '{item.Label}')")">
                                               @item.Label
                                        </button>
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>

                <div class="mt-2 text-sm text-gray-500 flex gap-2 flex-wrap">
                    <span>Item#: @Model.SKU</span>
                    @if (!string.IsNullOrWhiteSpace(Model.VariantSku))
                    {
                        <span id="variantSku">• Variant: @Model.VariantSku</span>
                    }
                </div>

                <div class="mt-2 inline-flex items-center gap-2 text-xs text-blue-700">
                    <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2 15.09 8.26 22 9.27l-5 4.87L18.18 22 12 18.77 5.82 22 7 14.14l-5-4.87 6.91-1.01L12 2Z" /></svg>
                    Recently Launched
                </div>

                <hr class="my-4" />

                <ul class="space-y-2 text-[15px] text-gray-800 pl-1">
                    @if (bullets.Count > 0)
                    {
                        foreach (var line in bullets)
                        {
                            <li class="flex gap-2">
                                <svg class="w-5 h-5 mt-0.5 shrink-0 text-green-600" viewBox="0 0 24 24" fill="currentColor"><path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" /></svg>
                                <span>@line</span>
                            </li>
                        }
                    }
                    else
                    {
                        <li class="flex gap-2"><svg class="w-5 h-5 mt-0.5 text-green-600" viewBox="0 0 24 24" fill="currentColor"><path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" /></svg><span>4K 240Hz / FHD 480Hz dual-mode OLED.</span></li>
                        <li class="flex gap-2"><svg class="w-5 h-5 mt-0.5 text-green-600" viewBox="0 0 24 24" fill="currentColor"><path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" /></svg><span>2× HDMI 2.1 + 1× DisplayPort 1.4.</span></li>
                        <li class="flex gap-2"><svg class="w-5 h-5 mt-0.5 text-green-600" viewBox="0 0 24 24" fill="currentColor"><path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" /></svg><span>TrueBlack glossy panel, ultra-sharp imagery.</span></li>
                        <li class="flex gap-2"><svg class="w-5 h-5 mt-0.5 text-green-600" viewBox="0 0 24 24" fill="currentColor"><path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" /></svg><span>VESA DisplayHDR™ 400 True Black, DCI-P3 99%.</span></li>
                    }
                </ul>
            </div>

            @if (!string.IsNullOrWhiteSpace(Model.OverviewText))
            {
                <div class="bg-white rounded-2xl p-4 sm:p-5 shadow mt-4">
                    <h2 class="text-lg font-semibold mb-2 text-gray-800 inline-flex items-center gap-2">
                        <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor"><path d="M4 6h16v2H4zM4 11h16v2H4zM4 16h10v2H4z" /></svg>
                        Product details
                    </h2>
                    <div class="prose max-w-none text-gray-800 leading-relaxed">
                        @Html.Raw(Html.Encode(Model.OverviewText).Replace("\r\n", "<br/>").Replace("\n", "<br/>"))
                    </div>
                </div>
            }
        </div>

        <!-- RIGHT: Price panel -->
        <aside class="col-span-1 lg:col-span-3">
            <div class="bg-white rounded-2xl p-4 sm:p-5 shadow sticky top-20">
                <div class="flex items-baseline gap-2">
                    <div id="currentPrice" class="text-4xl font-extrabold text-gray-900 inline-flex items-baseline gap-1">
                        <svg class="w-6 h-6 mt-1" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M12 1a2 2 0 0 1 2 2v1h1a3 3 0 0 1 0 6h-3v2h3a3 3 0 1 1 0 6h-1v1a2 2 0 1 1-4 0v-1H9a3 3 0 0 1 0-6h3v-2H9a3 3 0 0 1 0-6h1V3a2 2 0 0 1 2-2Z" /></svg>
                        @Model.Currency@Math.Truncate(Model.Price)
                        <span class="text-base align-super">
                            @{
                                var cents = (Model.Price - Math.Truncate(Model.Price));
                                var tail = (cents == 0 ? "00" : (cents.ToString("0.##").Replace("0.", "")).PadRight(2, '0'));
                            }
                            .@tail
                        </span>
                    </div>

                    @if (Model.OldPrice.HasValue && Model.OldPrice.Value > Model.Price)
                    {
                        <div id="oldPrice" class="text-gray-400 line-through">
                            @Model.Currency@Model.OldPrice.Value.ToString("0.##")
                        </div>
                    }
                    else
                    {
                        <div id="oldPrice" style="display:none"></div>
                    }
                </div>

                <div class="mt-2 text-xs text-gray-600 financing-info">
                    Pay in 4 interest-free payments of
                    <span class="font-semibold">@Model.Currency@(Math.Truncate((Model.Price / 4m)))</span>
                    @{
                        var finCents = ((Model.Price / 4m) - Math.Truncate((Model.Price / 4m)));
                        var finTail = (finCents == 0 ? "00" : (finCents.ToString("0.##").Replace("0.", "")).PadRight(2, '0'));
                    }
                    .<span class="text-xs">@finTail</span>
                </div>

                <div class="mt-4 inline-flex items-center rounded-full border overflow-hidden">
                    <button class="w-9 h-9 grid place-items-center hover:bg-gray-50" onclick="chgQty(-1)" aria-label="Decrease">
                        <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor"><path d="M5 11h14v2H5z" /></svg>
                    </button>
                    <input id="qty" class="w-12 text-center outline-none" type="text" value="1" />
                    <button class="w-9 h-9 grid place-items-center hover:bg-gray-50" onclick="chgQty(1)" aria-label="Increase">
                        <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor"><path d="M11 5h2v14h-2z" /><path d="M5 11h14v2H5z" /></svg>
                    </button>
                </div>

                <form id="addForm" asp-controller="Cart" asp-action="Add" method="post" class="mt-4">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="productId" value="@Model.ProductId" />
                    <input type="hidden" id="hidVariantId" name="productVariantId" value="@Model.VariantId" />
                    <input type="hidden" id="hidQty" name="qty" value="1" />
                    <!-- CHỈ tạo hidden optionalValueId khi người dùng có chọn (làm ở JS) -->

                    <button type="submit"
                        class="mt-4 w-full rounded-full bg-[#f7a928] hover:bg-[#e1981e] text-[#0b2f63] font-semibold py-3 inline-flex items-center justify-center gap-2">
                        <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor"><path d="M3 3h2l.4 2M7 13h10l3-8H6.4M7 13L5.4 5M7 13l-2 7h2l2-7m8 0l2 7h2l-2-7" /></svg>
                        Add to cart
                    </button>
                </form>
            </div>
        </aside>
    </section>
</main>





<script>
    let currentVariantPrice = @Model.Price; // Giá variant cơ bản
    let currentOldPrice = @Model.OldPrice ?? 0; // Giá cũ nếu có
    let selectedOptions = {};     // variant options
    let selectedOptionalId = null; // add-on (chỉ 1 cái)


    // PHẢI có hàm này trước khi gọi trong DOMContentLoaded
    async function selectVariant(btn){
        try{
            const id = btn.getAttribute('data-variant-id');
            if(!id) return;

            // nếu bạn có hidden input trong <form>:
            document.getElementById('hidVariantId')?.setAttribute('value', id);

            // highlight nút
            document.querySelectorAll('[data-variant-id]')
                .forEach(b => b.classList.remove('border-blue-600','ring-2','ring-blue-200','bg-blue-50'));
            btn.classList.add('border-blue-600','ring-2','ring-blue-200','bg-blue-50');

            // reset lựa chọn add-on khi đổi variant
            selectedOptions = {};
            selectedOptionalId = null;

            // giá tạm từ data-attrs
            const p0 = parseFloat(btn.getAttribute('data-variant-price') || "0");
            const o0 = btn.getAttribute('data-variant-old-price');
            currentVariantPrice = p0;
            currentOldPrice = o0 ? parseFloat(o0) : 0;
            updatePrice(p0, o0, '@Model.Currency');

            // gọi API variant-data (nếu có)
            const res = await fetch(`/product/variant-data/${id}`);
            if(res.ok){
                const data = await res.json();

                // ảnh
                if (data?.images?.length){
                    document.getElementById('mainImg').src = data.images[0];
                    renderThumbs(data.images);
                }

                // sku
                const variantSkuSpan = document.getElementById('variantSku');
                if (variantSkuSpan && data?.variantSku){
                    variantSkuSpan.textContent = `• Variant: ${data.variantSku}`;
                }

                // options từ API (hãy nhớ set data-optional-id cho nhóm add-on trong renderOptionGroups)
                renderOptionGroups(data.optionGroups, data.selectedOptions, data.availableValues);

                // giá chuẩn từ API
                const apiPrice = data.price ?? p0;
                const apiOld  = data.oldPrice ?? o0;
                currentVariantPrice = apiPrice;
                currentOldPrice = apiOld ? parseFloat(apiOld) : 0;
                updatePrice(apiPrice, apiOld, data.currency || '@Model.Currency');
            }
        }catch(e){ console.error(e); }
    }

    function selectOption(btn, groupName, label) {
        const price = parseFloat(btn.getAttribute('data-option-price') || '0');
        const optId = btn.getAttribute('data-optional-id'); // nếu có => add-on

          if (optId) {
            // Add-on: chỉ 1 cái, toggle
            const already = selectedOptionalId === optId;
            const sibs = btn.parentElement.querySelectorAll('[data-optional-id]');
            sibs.forEach(b => b.classList.remove('border-blue-600','bg-blue-50'));
            if (already) {
              selectedOptionalId = null;
            } else {
              selectedOptionalId = optId;
              btn.classList.add('border-blue-600','bg-blue-50');
            }

            // cập nhật giá hiển thị tạm (server sẽ tính lại chuẩn)
            const base = currentVariantPrice + calculateOptionTotal();
            const addon = already ? 0 : price;
            updatePrice(base + addon, currentOldPrice > 0 ? currentOldPrice + addon : null, '@Model.Currency');
            return;
        }
    


         // Variant option (không gửi server, chỉ hiển thị/tính giá tạm)
          const isSelected = selectedOptions[groupName]?.label === label;
          if (isSelected) {
            delete selectedOptions[groupName];
          } else {
            selectedOptions[groupName] = { label, price };
          }
          [...btn.parentElement.children].forEach(b => b.classList.remove('border-blue-600','bg-blue-50'));
          if (!isSelected) btn.classList.add('border-blue-600','bg-blue-50');

          const optionTotal = calculateOptionTotal();
          updatePrice(currentVariantPrice + optionTotal, currentOldPrice > 0 ? currentOldPrice + optionTotal : null, '@Model.Currency');
    }   

    // form submit: chỉ thêm hidden optionalValueId khi có chọn
    document.getElementById('addForm')?.addEventListener('submit', function () {
      [...this.querySelectorAll('input[name="optionalValueId"]')].forEach(n => n.remove());
      if (selectedOptionalId) {
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'optionalValueId'; // khớp tham số action Add(...)
        input.value = selectedOptionalId;
        this.appendChild(input);
      }
    });


    // Tính tổng giá options đang chọn
    function calculateOptionTotal() {
        return Object.values(selectedOptions).reduce((sum, opt) => sum + (opt.price || 0), 0);
    }

    function updatePrice(price, oldPrice, currency){
        const cur = currency || '@Model.Currency';
        const el = document.getElementById('currentPrice');
        const oldEl = document.getElementById('oldPrice');

        const p = Number(price || 0);
        const whole = Math.trunc(p);
        const dec = (p - whole).toFixed(2).substring(2).padEnd(2, '0');

        if(el){
            el.innerHTML = `
                <svg class="w-6 h-6 mt-1" viewBox="0 0 24 24" fill="currentColor"><path d="M12 1a2 2 0 0 1 2 2v1h1a3 3 0 0 1 0 6h-3v2h3a3 3 0 1 1 0 6h-1v1a2 2 0 1 1-4 0v-1H9a3 3 0 0 1 0-6h3v-2H9a3 3 0 0 1 0-6h1V3a2 2 0 0 1 2-2Z"/></svg>
                ${cur}${whole}<span class="text-base align-super">.${dec}</span>`;
        }

        if(oldEl){
            if(oldPrice && Number(oldPrice) > 0){
                const oldP = Number(oldPrice);
                const oldWhole = Math.trunc(oldP);
                const oldDec = (oldP - oldWhole).toFixed(2).substring(2).padEnd(2, '0');
                oldEl.innerHTML = `${cur}${oldWhole}.<span class="text-sm">${oldDec}</span>`;
                oldEl.style.display = 'block';
            } else {
                oldEl.style.display = 'none';
            }
        }

        const fin = document.querySelector('.financing-info');
        if (fin) {
            const finP = p / 4;
            const finWhole = Math.trunc(finP);
            const finDec = (finP - finWhole).toFixed(2).substring(2).padEnd(2, '0');
            fin.innerHTML = `Pay in 4 interest-free payments of <span class="font-semibold">${cur}${finWhole}.<span class="text-xs">${finDec}</span></span>`;
        }
    }

    function renderThumbs(items){
        const wrap = document.getElementById('thumbs');
        if(!wrap) return;
        wrap.innerHTML = '';

        items.forEach((url, idx) => {
            const btn = document.createElement('button');
            btn.className = 'rounded-lg border border-gray-200 bg-white hover:border-blue-500 p-1';
            btn.onclick = () => { const main = document.getElementById('mainImg'); if(main){ main.src = url; } };

            const img = document.createElement('img');
            img.src = url; img.alt = 'thumb ' + idx;
            img.className = 'w-20 h-14 object-cover rounded border border-gray-200';

            btn.appendChild(img);
            wrap.appendChild(btn);
        });
    }

    function renderOptionGroups(groups, selected, availableValues) {
        const wrap = document.getElementById("optionsWrap");
        wrap.innerHTML = "";
        if (!groups || !groups.length) return;

        groups.forEach(g => {
            const div = document.createElement("div");
            div.className = "mt-3";
            div.innerHTML = `<div class="font-medium text-sm mb-1">${g.name}</div>`;

            const list = document.createElement("div");
            list.className = "flex gap-2 flex-wrap";

            (g.values || []).forEach(valObj => {
                // Giả sử g.values là array of {label: string, price: number}
                const val = valObj.label || valObj; // Backward compat nếu chỉ string
                const price = valObj.price || 0;
                const btn = document.createElement("button");
                btn.className = "px-3 py-1 border rounded-lg text-sm hover:bg-blue-50 transition border-gray-300";
                btn.innerText = val;
                btn.setAttribute('data-option-group', g.name);
                btn.setAttribute('data-option-label', val);
                btn.setAttribute('data-option-price', price.toString());

                // highlight value đang được chọn của biến thể
                const isSelected = selected && selected[g.name] === val;
                if (isSelected) {
                    btn.classList.add("border-blue-600", "bg-blue-50");
                    selectedOptions[g.name] = { label: val, price: price };
                }

                // Disable nếu không available (chưa assign variant)
                const availForType = availableValues?.[g.name] || [];
                const isAvailable = availForType.includes(val);
                if (!isAvailable) {
                    btn.disabled = true;
                    btn.classList.add("opacity-50", "cursor-not-allowed", "text-gray-400");
                    btn.title = "Chưa có phiên bản này";
                }

                btn.onclick = () => {
                    if (btn.disabled) return;
                    // chỉ highlight tại group hiện tại (không gọi API lọc biến thể ở đây)
                    [...list.children].forEach(b => b.classList.remove("border-blue-600","bg-blue-50"));
                    if (selectedOptions[g.name]?.label !== val) {
                        btn.classList.add("border-blue-600", "bg-blue-50");
                    }
                    selectOption(btn, g.name, val);
                };

                list.appendChild(btn);
            });

            div.appendChild(list);
            wrap.appendChild(div);
        });
    }

    // Auto-load variant đang chọn
    document.addEventListener("DOMContentLoaded", () => {
        const activeBtn =
            document.querySelector('[data-variant-id].ring-2') ||
            document.querySelector(`[data-variant-id="@Model.VariantId"]`) ||
            document.querySelector('[data-variant-id]');

        if (activeBtn && typeof selectVariant === 'function') {
            selectVariant(activeBtn);
        } else {
            const initImages = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Images ?? new System.Collections.Generic.List<string>()));
            if(initImages.length){ renderThumbs(initImages); }
        }
    });

    function chgQty(delta){
        const el = document.getElementById('qty');
        const v = Math.max(1, (parseInt(el.value || "1") || 1) + delta);
        el.value = v;
        document.getElementById('hidQty')?.setAttribute('value', String(v));
    }
</script>