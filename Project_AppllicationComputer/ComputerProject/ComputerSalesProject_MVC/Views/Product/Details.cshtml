@model ProductDetailViewModel
@{
    ViewData["Title"] = Model.Title;

    var bullets = (Model.OverviewText ?? "")
        .Split(new[] { "\r\n", "\n" }, StringSplitOptions.RemoveEmptyEntries)
        .Take(8).ToList();
}
<script src="https://cdn.tailwindcss.com"></script>
<script>
    function chgQty(n){
      const el = document.getElementById('qty');
      let v = parseInt(el.value||'1',10)+n;
      if(isNaN(v) || v<1) v=1;
      el.value=v;
    }

    // ============ ADD: chọn variant -> đổi ảnh và load option types ============
    async function selectVariant(btn){
        try{
            const id = btn.getAttribute('data-variant-id');
            const sku = btn.getAttribute('data-variant-sku');
            const price = btn.getAttribute('data-variant-price');
            const discount = btn.getAttribute('data-variant-discount');
            
            if(!id) return;

            console.log('Selected variant:', { id, sku, price, discount });

            // lưu lại variant đã chọn
            const hid = document.getElementById('selectedVariantId');
            if(hid) hid.value = id;

            // gọi API lấy data variant (ảnh/giá/option types)
            const res = await fetch(`/product/variant-data/${id}`);
            if(!res.ok) {
                console.log('API call failed, using fallback data');
                // Fallback: sử dụng data từ button attributes
                updateVariantDisplay(sku, price, discount);
                loadOptionTypesFallback(id);
                return;
            }
            const data = await res.json();

            // đổi ảnh chính
            if (data?.images?.length){
                const main = document.getElementById('mainImg');
                if(main) main.src = data.images[0];

                // render lại thumbnails
                renderThumbs(data.images);
            }

            // Cập nhật thông tin variant
            updateVariantDisplay(data?.variantSku || sku, data?.price || price, data?.discountPrice || discount);

            // Load option types
            if (data?.optionTypes && data.optionTypes.length > 0) {
                loadOptionTypes(data.optionTypes);
            } else {
                // Fallback: load option types từ API riêng
                await loadOptionTypesFromAPI(id);
            }

            // highlight nút đang chọn
            document.querySelectorAll('[data-variant-id]')
                .forEach(b => b.classList.remove('border-blue-600','ring-2','ring-blue-200','bg-blue-50'));
            btn.classList.add('border-blue-600','ring-2','ring-blue-200','bg-blue-50');

        }catch(e){
            console.error('Error selecting variant:', e);
        }
    }

    // Cập nhật hiển thị thông tin variant
    function updateVariantDisplay(sku, price, discount) {
        // Cập nhật Variant SKU hiển thị
        const variantSkuSpan = [...document.querySelectorAll('span')]
           .find(s => s.textContent?.trim().startsWith('• Variant:'));
        if(variantSkuSpan && sku){
           variantSkuSpan.textContent = `• Variant: ${sku}`;
        }

        // Cập nhật giá nếu cần
        if (price) {
            const currentPrice = parseFloat(price) - parseFloat(discount || 0);
            console.log('Updating price to:', currentPrice);
            // Có thể cập nhật giá ở đây nếu cần
        }
    }

    // Load option types từ API
    async function loadOptionTypesFromAPI(variantId) {
        try {
            const res = await fetch(`/product/variant-options/${variantId}`);
            if (res.ok) {
                const optionTypes = await res.json();
                loadOptionTypes(optionTypes);
            } else {
                loadOptionTypesFallback(variantId);
            }
        } catch (e) {
            console.error('Error loading option types:', e);
            loadOptionTypesFallback(variantId);
        }
    }

    // Load option types (render UI) - sử dụng VariantSummaryVM format
    function loadOptionTypes(optionTypes) {
        const container = document.getElementById('optionTypesContainer');
        const optionsDiv = document.getElementById('variantOptions');
        
        if (!container || !optionTypes || optionTypes.length === 0) {
            if (optionsDiv) optionsDiv.classList.add('hidden');
            return;
        }

        container.innerHTML = '';
        
        optionTypes.forEach(optionType => {
            const optionDiv = document.createElement('div');
            optionDiv.className = 'border rounded-lg p-3 bg-gray-50';
            
            optionDiv.innerHTML = `
                <div class="flex items-center justify-between mb-2">
                    <h4 class="font-medium text-gray-800">${optionType.name}</h4>
                    <span class="text-sm text-gray-500">${optionType.description || ''}</span>
                </div>
                <div class="flex flex-wrap gap-2">
                    ${optionType.values.map(value => `
                        <button type="button" 
                                class="px-3 py-1.5 text-sm border rounded-md bg-white hover:border-blue-500 hover:bg-blue-50 transition
                                       ${value.isSelected ? 'border-blue-600 bg-blue-50' : 'border-gray-300'}"
                                data-option-type-id="${optionType.id}"
                                data-variant-id="${value.variantId}"
                                data-sku="${value.sku}"
                                data-quantity="${value.quantity}"
                                data-display-price="${value.displayPrice}"
                                onclick="selectOptionValue(this)">
                            <div class="text-left">
                                <div class="font-medium">${value.name}</div>
                                <div class="text-xs text-gray-500">SKU: ${value.sku}</div>
                                <div class="text-xs text-gray-500">Còn: ${value.quantity}</div>
                                ${value.displayPrice > 0 ? `<div class="text-xs text-green-600">+$${value.displayPrice}</div>` : ''}
                            </div>
                        </button>
                    `).join('')}
                </div>
            `;
            
            container.appendChild(optionDiv);
        });

        if (optionsDiv) optionsDiv.classList.remove('hidden');
    }

    // Fallback: tạo option types mẫu sử dụng VariantSummaryVM format
    function loadOptionTypesFallback(variantId) {
        // Sử dụng format tương thích với VariantSummaryVM
       

        loadOptionTypes(sampleOptionTypes);
    }

    // Xử lý chọn option value - sử dụng VariantSummaryVM data
    function selectOptionValue(btn) {
        // Remove selection from siblings
        const optionTypeId = btn.getAttribute('data-option-type-id');
        const siblings = document.querySelectorAll(`[data-option-type-id="${optionTypeId}"]`);
        siblings.forEach(sibling => {
            sibling.classList.remove('border-blue-600', 'bg-blue-50');
            sibling.classList.add('border-gray-300');
        });

        // Add selection to clicked button
        btn.classList.remove('border-gray-300');
        btn.classList.add('border-blue-600', 'bg-blue-50');

        // Lấy thông tin từ VariantSummaryVM
        const variantId = btn.getAttribute('data-variant-id');
        const sku = btn.getAttribute('data-sku');
        const quantity = btn.getAttribute('data-quantity');
        const displayPrice = btn.getAttribute('data-display-price');

        console.log('Selected option (VariantSummaryVM):', {
            optionTypeId: optionTypeId,
            variantId: variantId,
            sku: sku,
            quantity: quantity,
            displayPrice: displayPrice
        });

        // Kiểm tra số lượng còn lại
        if (parseInt(quantity) <= 0) {
            alert('Sản phẩm này đã hết hàng!');
            return;
        }

        // Cập nhật giá tổng
        updateTotalPrice();
        
        // Có thể lưu thông tin variant được chọn vào hidden input
        updateSelectedVariantInfo(variantId, sku, displayPrice);
    }

    // Cập nhật giá tổng dựa trên các option được chọn (VariantSummaryVM)
    function updateTotalPrice() {
        const selectedOptions = document.querySelectorAll('.border-blue-600[data-variant-id]');
        let totalAdjustment = 0;
        
        selectedOptions.forEach(option => {
            const displayPrice = parseFloat(option.getAttribute('data-display-price') || 0);
            totalAdjustment += displayPrice;
        });

        console.log('Total price adjustment (VariantSummaryVM):', totalAdjustment);
        
        // Có thể cập nhật giá hiển thị ở đây
        // Ví dụ: cập nhật giá trong price panel
        const basePrice = @Model.Price; // Giá cơ bản từ model
        const newTotalPrice = basePrice + totalAdjustment;
        console.log('New total price:', newTotalPrice);
    }

    // Cập nhật thông tin variant được chọn
    function updateSelectedVariantInfo(variantId, sku, displayPrice) {
        // Có thể lưu vào hidden inputs hoặc state
        const selectedVariants = document.getElementById('selectedVariants') || createSelectedVariantsInput();
        
        // Lưu thông tin variant được chọn
        const variantInfo = {
            variantId: variantId,
            sku: sku,
            displayPrice: displayPrice,
            timestamp: Date.now()
        };
        
        console.log('Updated selected variant info:', variantInfo);
        
        // Có thể gửi lên server khi cần
        // hoặc lưu vào localStorage
        localStorage.setItem('selectedVariant_' + variantId, JSON.stringify(variantInfo));
    }

    // Tạo hidden input để lưu thông tin variants được chọn
    function createSelectedVariantsInput() {
        const input = document.createElement('input');
        input.type = 'hidden';
        input.id = 'selectedVariants';
        input.name = 'selectedVariants';
        document.querySelector('form')?.appendChild(input);
        return input;
    }

    function renderThumbs(urls){
        const wrap = document.getElementById('thumbs');
        if(!wrap) return;
        wrap.innerHTML = '';
        urls.forEach((url, idx) => {
            const btn = document.createElement('button');
            btn.className = 'rounded-lg border border-gray-200 bg-white hover:border-blue-500 p-1';
            btn.onclick = () => { const main = document.getElementById('mainImg'); if(main){ main.src = url; } };
            const img = document.createElement('img');
            img.src = url;
            img.alt = 'thumb ' + idx;
            img.className = 'w-20 h-14 object-cover rounded border border-gray-200';
            btn.appendChild(img);
            wrap.appendChild(btn);
        });
    }
  window.chgQty = chgQty;
  window.selectVariant = selectVariant;
  window.selectOptionValue = selectOptionValue;
  // các helper nếu cần dùng ở inline khác:
  window.updateVariantDisplay = updateVariantDisplay;
  window.loadOptionTypes = loadOptionTypes;
  window.loadOptionTypesFromAPI = loadOptionTypesFromAPI;
  window.loadOptionTypesFallback = loadOptionTypesFallback;
  window.renderThumbs = renderThumbs;
</script>

<main class="max-w-[1320px] xl:max-w-[1400px] mx-auto px-3 lg:px-4 py-6">

    <!-- Breadcrumb -->
    <nav class="text-sm text-gray-500 mb-3 flex items-center gap-1">
        <svg class="w-4 h-4 text-gray-400" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M10.707 2.293a1 1 0 0 0-1.414 0L2.586 9H1a1 1 0 1 0 0 2h1v9a2 2 0 0 0 2 2h6v-7h4v7h6a2 2 0 0 0 2-2v-9h1a1 1 0 1 0 0-2h-1.586l-6.707-6.707a1 1 0 0 0-1.414 0L12 3.586l-1.293-1.293Z" /></svg>
        <a href="/" class="hover:underline">Home</a>
        <span>›</span>
        <a href="/gaming" class="hover:underline">Gaming & VR</a>
        <span>›</span>
        <a href="/gaming/monitors" class="hover:underline">Gaming Monitor</a>
        <span>›</span>
        <span class="text-gray-700 truncate" title="@Model.Title">@Model.Title</span>
    </nav>

    <!-- ALWAYS 3 COLUMNS ON lg+ -->
    <section class="grid grid-cols-1 lg:grid-cols-12 gap-6 items-start">

        <!-- LEFT: Gallery (6/12) -->
        <div class="col-span-1 lg:col-span-6">
            <div class="bg-white rounded-2xl p-4 shadow">
                <div class="aspect-[16/10] bg-white rounded-xl overflow-hidden flex items-center justify-center border">
                    <img id="mainImg"
                         src="@(Model.Images?.FirstOrDefault() ?? "/images/placeholder.svg")"
                         class="max-h-[70vh] w-auto object-contain" alt="@Model.Title" />
                </div>

                @if (Model.Images?.Any() == true)
                {
                    <div class="mt-3 flex flex-wrap gap-2">
                        @foreach (var (url, idx) in Model.Images.Select((u, i) => (u, i)))
                        {
                            <button class="rounded-lg border border-gray-200 bg-white hover:border-blue-500 p-1"
                                    onclick="document.getElementById('mainImg').src='@url'">
                                <img src="@url" class="w-20 h-14 object-cover rounded border border-gray-200" alt="thumb @idx" />
                            </button>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- MIDDLE: Info/Bullets (3/12) -->
        <div class="col-span-1 lg:col-span-3">
            <div class="bg-white rounded-2xl p-4 sm:p-5 shadow">
                <!-- brand + shop-all -->
                <div class="flex items-center gap-2 mb-1">
                    <img src="https://upload.wikimedia.org/wikipedia/commons/2/2f/ASUS_Logo.svg"
                         class="h-5 w-auto" alt="brand" />
                    <a class="text-blue-700 text-sm font-semibold hover:underline inline-flex items-center gap-1" href="#">
                        <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M3 6a3 3 0 0 1 3-3h5l2 2h5a3 3 0 0 1 3 3v1H3V6Z" /><path d="M3 10h18v7a3 3 0 0 1-3 3H6a3 3 0 0 1-3-3v-7Z" /></svg>
                        Shop All ASUS ROG
                    </a>
                </div>

                <h1 class="text-2xl font-bold leading-snug">@Model.Title</h1>
                @if (Model.Variants?.Any() == true)
                {
                    <div class="mt-3">
                        <div class="text-sm font-medium mb-2">Chọn phiên bản</div>
                        <div class="flex flex-wrap gap-2">
                            @foreach (var v in Model.Variants)
                            {
                                <button type="button"
                                        class="px-3 py-2 rounded-lg border text-sm bg-white
                               hover:border-blue-500 hover:bg-blue-50 transition
                               @(Model.VariantId == v.VariantId ? "border-blue-600 ring-2 ring-blue-200" : "border-gray-300")"
                                        data-variant-id="@v.VariantId"
                                        data-variant-sku="@v.SKU"
                                        onclick="selectVariant(this)">
                                    @v.SKU
                                </button>
                            }
                        </div>
                        
                        <!-- Hiển thị Option Types của variant được chọn -->
                        <div id="variantOptions" class="mt-4 hidden">
                            <div class="text-sm font-medium mb-2">Tùy chọn sản phẩm</div>
                            <div id="optionTypesContainer" class="space-y-3">
                                <!-- Option types sẽ được load động -->
                            </div>
                        </div>
                    </div>
                }


                <div class="mt-1 text-sm text-gray-500 flex items-center gap-3 flex-wrap">
                    <span class="inline-flex items-center gap-1">
                        <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor"><path d="M17 2H7a2 2 0 0 0-2 2v16l7-3 7 3V4a2 2 0 0 0-2-2Z" /></svg>
                        Item#: @Model.SKU
                    </span>
                    @if (!string.IsNullOrWhiteSpace(Model.VariantSku))
                    {
                        <span>• Variant: @Model.VariantSku</span>
                    }
                    <a class="text-blue-700 hover:underline inline-flex items-center gap-1" href="#">
                        <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor"><path d="M7 8a5 5 0 1 1 10 0c0 2.761-2.239 5-5 5H9l-2 2v-2a5 5 0 0 1-0-5Z" /></svg>
                        Ask Or Answer A Question
                    </a>
                </div>

                <!-- badge -->
                <div class="mt-2 inline-flex items-center gap-2 text-xs text-blue-700">
                    <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2 15.09 8.26 22 9.27l-5 4.87L18.18 22 12 18.77 5.82 22 7 14.14l-5-4.87 6.91-1.01L12 2Z" /></svg>
                    Recently Launched
                </div>

                <hr class="my-4" />

                <!-- bullets -->
                <ul class="space-y-2 text-[15px] text-gray-800 pl-1">
                    @if (bullets.Count > 0)
                    {
                        foreach (var line in bullets)
                        {
                            <li class="flex gap-2">
                                <svg class="w-5 h-5 mt-0.5 shrink-0 text-green-600" viewBox="0 0 24 24" fill="currentColor"><path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" /></svg>
                                <span>@line</span>
                            </li>
                        }
                    }
                    else
                    {
                        <li class="flex gap-2"><svg class="w-5 h-5 mt-0.5 text-green-600" viewBox="0 0 24 24" fill="currentColor"><path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" /></svg><span>4K 240Hz / FHD 480Hz dual-mode OLED.</span></li>
                        <li class="flex gap-2"><svg class="w-5 h-5 mt-0.5 text-green-600" viewBox="0 0 24 24" fill="currentColor"><path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" /></svg><span>2× HDMI 2.1 + 1× DisplayPort 1.4.</span></li>
                        <li class="flex gap-2"><svg class="w-5 h-5 mt-0.5 text-green-600" viewBox="0 0 24 24" fill="currentColor"><path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" /></svg><span>TrueBlack glossy panel, ultra-sharp imagery.</span></li>
                        <li class="flex gap-2"><svg class="w-5 h-5 mt-0.5 text-green-600" viewBox="0 0 24 24" fill="currentColor"><path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" /></svg><span>VESA DisplayHDR™ 400 True Black, DCI-P3 99%.</span></li>
                    }
                </ul>
            </div>

            @if (!string.IsNullOrWhiteSpace(Model.OverviewText))
            {
                <div class="bg-white rounded-2xl p-4 sm:p-5 shadow mt-4">
                    <h2 class="text-lg font-semibold mb-2 text-gray-800 inline-flex items-center gap-2">
                        <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor"><path d="M4 6h16v2H4zM4 11h16v2H4zM4 16h10v2H4z" /></svg>
                        Product details
                    </h2>
                    <div class="prose max-w-none text-gray-800 leading-relaxed">
                        @Html.Raw(Html.Encode(Model.OverviewText).Replace("\r\n", "<br/>").Replace("\n", "<br/>"))
                    </div>
                </div>
            }
        </div>

        <!-- RIGHT: Price panel (3/12) -->
        <aside class="col-span-1 lg:col-span-3">
            <div class="bg-white rounded-2xl p-4 sm:p-5 shadow sticky top-20">
                <!-- Price -->
                <div class="flex items-baseline gap-2">
                    <div class="text-4xl font-extrabold text-gray-900 inline-flex items-baseline gap-1">
                        <svg class="w-6 h-6 mt-1" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M12 1a2 2 0 0 1 2 2v1h1a3 3 0 0 1 0 6h-3v2h3a3 3 0 1 1 0 6h-1v1a2 2 0 1 1-4 0v-1H9a3 3 0 0 1 0-6h3v-2H9a3 3 0 0 1 0-6h1V3a2 2 0 0 1 2-2Z" /></svg>
                        @Model.Currency@Math.Truncate(Model.Price).ToString("0")
                        <span class="text-base align-super">
                            @{
                                var cents = (Model.Price - Math.Truncate(Model.Price));
                                var tail = (cents == 0 ? "00" : (cents.ToString("0.##").Replace("0.", "")).PadRight(2, '0'));
                            }
                            .@tail
                        </span>
                    </div>
                    @if (Model.OldPrice.HasValue && Model.OldPrice.Value > Model.Price)
                    {
                        <div class="text-gray-400 line-through">
                            @Model.Currency@Model.OldPrice.Value.ToString("0.##")
                        </div>
                    }
                </div>

                <!-- Financing -->
                <div class="mt-2 text-xs text-gray-600">
                    Pay in 4 interest-free payments of
                    <span class="font-semibold">@Model.Currency@((Model.Price / 4m))</span>
                </div>

                <!-- Qty -->
                <div class="mt-4 inline-flex items-center rounded-full border overflow-hidden">
                    <button class="w-9 h-9 grid place-items-center hover:bg-gray-50" onclick="chgQty(-1)" aria-label="Decrease">
                        <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor"><path d="M5 11h14v2H5z" /></svg>
                    </button>
                    <input id="qty" class="w-12 text-center outline-none" type="text" value="1" />
                    <button class="w-9 h-9 grid place-items-center hover:bg-gray-50" onclick="chgQty(1)" aria-label="Increase">
                        <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor"><path d="M11 5h2v14h-2z" /><path d="M5 11h14v2H5z" /></svg>
                    </button>
                </div>

                <!-- Hidden input để lưu variant ID -->
                <input type="hidden" id="selectedVariantId" name="selectedVariantId" value="@Model.VariantId" />

                <!-- CTAs -->
                <button class="mt-4 w-full rounded-full bg-[#f7a928] hover:bg-[#e1981e] text-[#0b2f63] font-semibold py-3 inline-flex items-center justify-center gap-2">
                    <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor"><path d="M3 3h2l.4 2M7 13h10l3-8H6.4M7 13L5.4 5M7 13l-2 7h2l2-7m8 0l2 7h2l-2-7" /></svg>
                    Add to cart
                </button>
                <button class="mt-3 w-full rounded-full border font-semibold py-3 hover:bg-gray-50 inline-flex items-center justify-center gap-2">
                    <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor"><path d="M20 6H8l-2-2H2v2h3l3.6 7.59-1.35 2.45A2 2 0 0 0 9 18h10v-2H9.42a.25.25 0 0 1-.22-.37L10 14h7a2 2 0 0 0 1.8-1.1l2.9-5.8V6Z" /></svg>
                    Add to PC build list
                </button>

                <!-- Shipping -->
                <div class="mt-4 text-sm">
                    <div class="text-green-600 font-semibold inline-flex items-center gap-2">
                        <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor"><path d="M3 7h11v7h-1.18A3 3 0 0 0 10 17a3 3 0 0 0-2.82-3H3V7Zm11 7h2a3 3 0 0 1 6 0h-1a2 2 0 0 0-4 0h-1Zm-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm10 2a2 2 0 1 0 4 0h-4Z" /></svg>
                        Free Shipping
                    </div>
                    <div class="text-gray-600">Select delivery location</div>
                </div>

                <div class="my-4 h-px bg-gray-200"></div>

                <!-- Tools -->
                <div class="flex flex-wrap items-center gap-4 text-sm text-gray-700">
                    <button class="hover:underline inline-flex items-center gap-1">
                        <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor"><path d="M10 3H3v7h7V3Zm11 0h-7v7h7V3ZM10 14H3v7h7v-7Zm11 0h-7v7h7v-7Z" /></svg>
                        Compare
                    </button>
                    <button class="hover:underline inline-flex items-center gap-1">
                        <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor"><path d="M12 22a2 2 0 0 0 2-2H10a2 2 0 0 0 2 2Zm6-6V11a6 6 0 1 0-12 0v5l-2 2v1h16v-1l-2-2Z" /></svg>
                        Price alert
                    </button>
                    <button class="hover:underline inline-flex items-center gap-1">
                        <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor"><path d="M4 4h16v2H4z" /><path d="M6 6h12l-1 14-5-3-5 3L6 6Z" /></svg>
                        Report a listing
                    </button>
                </div>
                <div class="mt-3 text-sm text-blue-700 inline-flex items-center gap-1">
                    <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor"><path d="M12 21s-6-4.35-8.485-6.835A5.5 5.5 0 1 1 12 5.5a5.5 5.5 0 1 1 8.485 8.665C18 16.65 12 21 12 21Z" /></svg>
                    Add to wish list
                </div>

                <div class="my-4 h-px bg-gray-200"></div>

                <div class="text-xs text-gray-600 space-y-1">
                    <div class="inline-flex items-center gap-1">
                        <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor"><path d="M3 7h18v10H3z" /><path d="M7 7V5h10v2" /></svg>
                        Sold by <span class="font-semibold">Newegg</span>
                    </div><br />
                    <div class="inline-flex items-center gap-1">
                        <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor"><path d="M21 16v-5l-3-3h-4V4H3v12h2a3 3 0 0 0 6 0h4a3 3 0 0 0 6 0h0Z" /></svg>
                        Shipped by <span class="font-semibold">Newegg</span>
                    </div>
                </div>
            </div>
        </aside>

    </section>
</main>

