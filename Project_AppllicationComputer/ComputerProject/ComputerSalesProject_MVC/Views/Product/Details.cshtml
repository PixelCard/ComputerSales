@using System.Linq
@model ProductDetailViewModel
@using System.Linq

@{
    ViewData["Title"] = Model.Title;

    // bullets: an toàn khi OverviewText null/rỗng
    var bullets = string.IsNullOrWhiteSpace(Model.OverviewText)
        ? new List<string>()
        : Model.OverviewText
            .Split(new[] { "\r\n", "\n" }, StringSplitOptions.RemoveEmptyEntries)
            .Take(8)
            .ToList();
}
<script src="https://cdn.tailwindcss.com"></script>

<div class="min-h-screen bg-gray-50">
    <main class="w-full px-6 md:px-8 lg:px-10 xl:px-12 2xl:px-16 py-8">
        <div class="max-w-7xl mx-auto">

            <!-- Enhanced Breadcrumb -->
            <nav class="flex items-center gap-2 text-sm text-gray-500 mb-6">
                <a href="/" class="hover:text-orange-500 transition-colors flex items-center gap-1">
                    <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M10.707 2.293a1 1 0 0 0-1.414 0L2.586 9H1a1 1 0 1 0 0 2h1v9a2 2 0 0 0 2 2h6v-7h4v7h6a2 2 0 0 0 2-2v-9h1a1 1 0 1 0 0-2h-1.586l-6.707-6.707a1 1 0 0 0-1.414 0L12 3.586l-1.293-1.293Z" />
                    </svg>
                    Trang chủ
                </a>
                <svg class="w-4 h-4 text-gray-400" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z" />
                </svg>
                <a href="/gaming" class="hover:text-orange-500 transition-colors">Gaming & VR</a>
                <svg class="w-4 h-4 text-gray-400" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z" />
                </svg>
                <a href="/gaming/monitors" class="hover:text-orange-500 transition-colors">Gaming Monitor</a>
                <svg class="w-4 h-4 text-gray-400" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z" />
                </svg>
                <span class="text-gray-900 font-medium truncate" title="@Model.Title">@Model.Title</span>
            </nav>

            <!-- Product Layout -->
            <section class="grid grid-cols-1 lg:grid-cols-12 gap-8 items-start">

                <!-- LEFT: Enhanced Gallery (6/12) -->
                <div class="col-span-1 lg:col-span-6">
                    <div class="bg-white rounded-2xl shadow-lg border border-gray-200 overflow-hidden">
                        <!-- Main Image -->
                        <div class="relative aspect-[16/10] bg-gray-50 overflow-hidden">
                            @{
                                string mainImageSrc = "/images/placeholder.svg";
                                if (Model.Images != null && Model.Images.Count > 0)
                                {
                                    mainImageSrc = Model.Images[0];
                                }
                            }
                            <img id="mainImg" src="@mainImageSrc"
                                 class="w-full h-full object-contain transition-all duration-300" alt="@Model.Title" />

                            <!-- Image Zoom Overlay -->
                            <div class="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-10 transition-all duration-300 cursor-zoom-in"
                                 onclick="openImageModal()">
                            </div>

                            <!-- Image Counter -->
                            <div class="absolute top-4 right-4 bg-black bg-opacity-50 text-white px-3 py-1 rounded-full text-sm">
                                <span id="imageCounter">1</span> / <span id="totalImages">1</span>
                            </div>
                        </div>

                        <!-- Enhanced Thumbnails -->
                        <div class="p-4 border-t border-gray-100">
                            <div id="thumbs" class="flex gap-3 overflow-x-auto pb-2"></div>
                        </div>
                    </div>
                </div>

                <!-- MIDDLE: Enhanced Product Info (3/12) -->
                <div class="col-span-1 lg:col-span-3">
                    <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
                        <!-- Brand Section -->
                        <div class="flex items-center gap-3 mb-4">
                            <div class="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center">
                                <img src="https://upload.wikimedia.org/wikipedia/commons/2/2f/ASUS_Logo.svg"
                                     class="h-6 w-auto" alt="brand" />
                            </div>
                            <div>
                                <div class="text-sm text-gray-500">Thương hiệu</div>
                                <a class="text-orange-600 text-sm font-semibold hover:text-orange-700 inline-flex items-center gap-1"
                                   href="#">
                                    <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M3 6a3 3 0 0 1 3-3h5l2 2h5a3 3 0 0 1 3 3v1H3V6Z" />
                                        <path d="M3 10h18v7a3 3 0 0 1-3 3H6a3 3 0 0 1-3-3v-7Z" />
                                    </svg>
                                    Shop All ASUS ROG
                                </a>
                            </div>
                        </div>

                        <!-- Product Title -->
                        <h1 class="text-2xl font-bold text-gray-900 leading-tight mb-4">@Model.Title</h1>
                        <!-- Enhanced Variant Selection -->
                        @if (Model.Variants?.Any() == true)
                        {
                            <div class="mb-6">
                                <div class="flex items-center gap-2 mb-3">
                                    <div class="w-6 h-6 bg-blue-100 rounded-lg flex items-center justify-center">
                                        <svg class="w-3 h-3 text-blue-600" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M3 5h8v6H3V5Zm10 0h8v6h-8V5ZM3 13h8v6H3v-6Zm10 0h8v6h-8v-6Z" />
                                        </svg>
                                    </div>
                                    <h3 class="font-semibold text-gray-900">Chọn phiên bản</h3>
                                </div>
                                <div class="grid grid-cols-1 gap-3">
                                    @foreach (var v in Model.Variants)
                                    {
                                        <button type="button"
                                                class="p-4 rounded-xl border-2 text-left transition-all duration-200
                                                       @(Model.VariantId == v.VariantId ? "border-orange-500 bg-orange-50 ring-2 ring-orange-200" : "border-gray-200 hover:border-orange-300 hover:bg-orange-25")"
                                                data-variant-id="@v.VariantId" data-variant-price="@v.Price"
                                                data-variant-old-price="@v.OldPrice" onclick="selectVariant(this)">
                                            <div class="flex items-center justify-between">
                                                <div>
                                                    <div class="font-medium text-gray-900">@v.SKU</div>
                                                    <div class="text-sm text-gray-500">Phiên bản @v.VariantId</div>
                                                </div>
                                                <div class="text-right">
                                                    <div class="font-bold text-orange-600">
                                                        @Model.Currency@v.Price.ToString("0.##")
                                                    </div>
                                                    @if (v.OldPrice.HasValue && v.OldPrice.Value > v.Price)
                                                    {
                                                        <div class="text-sm text-gray-400 line-through">
                                                            @Model.Currency@v.OldPrice.Value.ToString("0.##")
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </button>
                                    }
                                </div>
                            </div>
                        }
                        <!-- OptionValues render tại đây -->
                        <div id="optionsWrap" class="mt-4"></div>

                        <div class="mt-2 text-sm text-gray-500 flex gap-2 flex-wrap">
                            <span>Item#: @Model.SKU</span>
                            @if (!string.IsNullOrWhiteSpace(Model.VariantSku))
                            {
                                <span id="variantSku">• Variant: @Model.VariantSku</span>
                            }
                        </div>


                        <div class="mt-1 text-sm text-gray-500 flex items-center gap-3 flex-wrap">
                            <span class="inline-flex items-center gap-1">
                                <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M17 2H7a2 2 0 0 0-2 2v16l7-3 7 3V4a2 2 0 0 0-2-2Z" />
                                </svg>
                                Item#: @Model.SKU
                            </span>
                            @if (!string.IsNullOrWhiteSpace(Model.VariantSku))
                            {
                                <span>• Variant: @Model.VariantSku</span>
                            }
                            <a class="text-blue-700 hover:underline inline-flex items-center gap-1" href="#">
                                <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M7 8a5 5 0 1 1 10 0c0 2.761-2.239 5-5 5H9l-2 2v-2a5 5 0 0 1-0-5Z" />
                                </svg>
                                Ask Or Answer A Question
                            </a>
                        </div>

                        <!-- badge -->
                        <div class="mt-2 inline-flex items-center gap-2 text-xs text-blue-700">
                            <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12 2 15.09 8.26 22 9.27l-5 4.87L18.18 22 12 18.77 5.82 22 7 14.14l-5-4.87 6.91-1.01L12 2Z" />
                            </svg>
                            Recently Launched
                        </div>

                        <hr class="my-4" />

                        <!-- bullets -->
                        <ul class="space-y-2 text-[15px] text-gray-800 pl-1">
                            @if (bullets.Count > 0)
                            {
                                foreach (var line in bullets)
                                {
                                    <li class="flex gap-2">
                                        <svg class="w-5 h-5 mt-0.5 shrink-0 text-green-600" viewBox="0 0 24 24"
                                             fill="currentColor">
                                            <path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" />
                                        </svg>
                                        <span>@line</span>
                                    </li>
                                }
                            }
                            else
                            {
                                <li class="flex gap-2">
                                    <svg class="w-5 h-5 mt-0.5 text-green-600" viewBox="0 0 24 24"
                                         fill="currentColor">
                                        <path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" />
                                    </svg><span>4K 240Hz / FHD 480Hz dual-mode OLED.</span>
                                </li>
                                <li class="flex gap-2">
                                    <svg class="w-5 h-5 mt-0.5 text-green-600" viewBox="0 0 24 24"
                                         fill="currentColor">
                                        <path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" />
                                    </svg><span>2× HDMI 2.1 + 1× DisplayPort 1.4.</span>
                                </li>
                                <li class="flex gap-2">
                                    <svg class="w-5 h-5 mt-0.5 text-green-600" viewBox="0 0 24 24"
                                         fill="currentColor">
                                        <path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" />
                                    </svg><span>TrueBlack glossy panel, ultra-sharp imagery.</span>
                                </li>
                                <li class="flex gap-2">
                                    <svg class="w-5 h-5 mt-0.5 text-green-600" viewBox="0 0 24 24"
                                         fill="currentColor">
                                        <path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" />
                                    </svg><span>VESA DisplayHDR™ 400 True Black, DCI-P3 99%.</span>
                                </li>
                            }
                        </ul>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(Model.OverviewText))
                    {
                        <div class="bg-white rounded-2xl p-4 sm:p-5 shadow mt-4">
                            <h2 class="text-lg font-semibold mb-2 text-gray-800 inline-flex items-center gap-2">
                                <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M4 6h16v2H4zM4 11h16v2H4zM4 16h10v2H4z" />
                                </svg>
                                Product details
                            </h2>
                            <div class="prose max-w-none text-gray-800 leading-relaxed">
                                @Html.Raw(Html.Encode(Model.OverviewText).Replace("\r\n", "<br/>").Replace("\n", "<br/>"))
                            </div>
                        </div>
                    }
                </div>

                <!-- RIGHT: Enhanced Price Panel (3/12) -->
                <aside class="col-span-1 lg:col-span-3">
                    <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-6 sticky top-20">
                        <!-- Dynamic Price Section -->
                        <div class="mb-6">
                            <div class="flex items-baseline gap-3">
                                <div id="currentPrice"
                                     class="text-4xl font-extrabold text-gray-900 inline-flex items-baseline gap-1">
                                    <svg class="w-6 h-6 mt-1" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 1a2 2 0 0 1 2 2v1h1a3 3 0 0 1 0 6h-3v2h3a3 3 0 1 1 0 6h-1v1a2 2 0 1 1-4 0v-1H9a3 3 0 0 1 0-6h3v-2H9a3 3 0 0 1 0-6h1V3a2 2 0 0 1 2-2Z" />
                                    </svg>
                                    @Model.Currency@Math.Truncate(Model.Price)
                                    <span class="text-base align-super">
                                        @{
                                            var cents = (Model.Price - Math.Truncate(Model.Price));
                                            var tail = (cents == 0 ? "00" : (cents.ToString("0.##").Replace("0.",
                                            "")).PadRight(2, '0'));
                                        }
                                        .@tail
                                    </span>
                                </div>
                                @if (Model.OldPrice.HasValue && Model.OldPrice.Value > Model.Price)
                                {
                                    <div id="oldPrice" class="text-gray-400 line-through text-lg">
                                        @Model.Currency@Model.OldPrice.Value.ToString("0.##")
                                    </div>
                                }
                            </div>

                            <!-- Savings Badge -->
                            @if (Model.OldPrice.HasValue && Model.OldPrice.Value > Model.Price)
                            {
                                var savings = Model.OldPrice.Value - Model.Price;
                                var savingsPercent = Math.Round((savings / Model.OldPrice.Value) * 100);

                                <div class="mt-2">
                                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                                        <svg class="w-4 h-4 mr-1" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 18.77 5.82 22 7 14.14l-5-4.87 6.91-1.01L12 2z" />
                                        </svg>
                                        Tiết kiệm @Model.Currency@savings.ToString("0.##") (@savingsPercent%)
                                    </span>
                                </div>
                            }

                        </div>

                        <!-- Financing -->
                        <div class="mt-2 text-xs text-gray-600">
                            Pay in 4 interest-free payments of
                            <span class="font-semibold">@Model.Currency@((Model.Price / 4m))</span>
                        </div>

                        <!-- Qty -->
                        <div class="mt-4 inline-flex items-center rounded-full border overflow-hidden">
                            <button class="w-9 h-9 grid place-items-center hover:bg-gray-50" onclick="chgQty(-1)"
                                    aria-label="Decrease">
                                <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M5 11h14v2H5z" />
                                </svg>
                            </button>
                            <input id="qty" class="w-12 text-center outline-none" type="text" value="1" />
                            <button class="w-9 h-9 grid place-items-center hover:bg-gray-50" onclick="chgQty(1)"
                                    aria-label="Increase">
                                <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M11 5h2v14h-2z" />
                                    <path d="M5 11h14v2H5z" />
                                </svg>
                            </button>
                        </div>

                        <!-- CTAs -->
                        <button class="mt-4 w-full rounded-full bg-[#f7a928] hover:bg-[#e1981e] text-[#0b2f63] font-semibold py-3 inline-flex items-center justify-center gap-2">
                            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M3 3h2l.4 2M7 13h10l3-8H6.4M7 13L5.4 5M7 13l-2 7h2l2-7m8 0l2 7h2l-2-7" />
                            </svg>
                            Add to cart
                        </button>
                        <button class="mt-3 w-full rounded-full border font-semibold py-3 hover:bg-gray-50 inline-flex items-center justify-center gap-2">
                            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M20 6H8l-2-2H2v2h3l3.6 7.59-1.35 2.45A2 2 0 0 0 9 18h10v-2H9.42a.25.25 0 0 1-.22-.37L10 14h7a2 2 0 0 0 1.8-1.1l2.9-5.8V6Z" />
                            </svg>
                            Add to PC build list
                        </button>

                        <!-- Shipping -->
                        <div class="mt-4 text-sm">
                            <div class="text-green-600 font-semibold inline-flex items-center gap-2">
                                <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M3 7h11v7h-1.18A3 3 0 0 0 10 17a3 3 0 0 0-2.82-3H3V7Zm11 7h2a3 3 0 0 1 6 0h-1a2 2 0 0 0-4 0h-1Zm-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm10 2a2 2 0 1 0 4 0h-4Z" />
                                </svg>
                                Free Shipping
                            </div>
                            <div class="text-gray-600">Select delivery location</div>
                        </div>

                        <div class="my-4 h-px bg-gray-200"></div>

                        <!-- Tools -->
                        <div class="flex flex-wrap items-center gap-4 text-sm text-gray-700">
                            <button class="hover:underline inline-flex items-center gap-1">
                                <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M10 3H3v7h7V3Zm11 0h-7v7h7V3ZM10 14H3v7h7v-7Zm11 0h-7v7h7v-7Z" />
                                </svg>
                                Compare
                            </button>
                            <button class="hover:underline inline-flex items-center gap-1">
                                <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M12 22a2 2 0 0 0 2-2H10a2 2 0 0 0 2 2Zm6-6V11a6 6 0 1 0-12 0v5l-2 2v1h16v-1l-2-2Z" />
                                </svg>
                                Price alert
                            </button>
                            <button class="hover:underline inline-flex items-center gap-1">
                                <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M4 4h16v2H4z" />
                                    <path d="M6 6h12l-1 14-5-3-5 3L6 6Z" />
                                </svg>
                                Report a listing
                            </button>
                        </div>
                        <div class="mt-3 text-sm text-blue-700 inline-flex items-center gap-1">
                            <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12 21s-6-4.35-8.485-6.835A5.5 5.5 0 1 1 12 5.5a5.5 5.5 0 1 1 8.485 8.665C18 16.65 12 21 12 21Z" />
                            </svg>
                            Add to wish list
                        </div>

                        <div class="my-4 h-px bg-gray-200"></div>

                        <div class="text-xs text-gray-600 space-y-1">
                            <div class="inline-flex items-center gap-1">
                                <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M3 7h18v10H3z" />
                                    <path d="M7 7V5h10v2" />
                                </svg>
                                Sold by <span class="font-semibold">Newegg</span>
                            </div><br />
                            <div class="inline-flex items-center gap-1">
                                <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M21 16v-5l-3-3h-4V4H3v12h2a3 3 0 0 0 6 0h4a3 3 0 0 0 6 0h0Z" />
                                </svg>
                                Shipped by <span class="font-semibold">Newegg</span>
                            </div>
                        </div>
                    </div>
                </aside>

            </section>
        </div>
    </main>
</div>

<!-- Image Modal -->
<div id="imageModal" class="fixed inset-0 bg-black bg-opacity-75 z-50 hidden items-center justify-center p-4">
    <div class="relative max-w-4xl max-h-full">
        <button onclick="closeImageModal()" class="absolute top-4 right-4 text-white hover:text-gray-300 z-10">
            <svg class="w-8 h-8" viewBox="0 0 24 24" fill="currentColor">
                <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" />
            </svg>
        </button>
        <img id="modalImage" src="" class="max-w-full max-h-full object-contain" alt="Product Image">
    </div>
</div>

<script>
    // ============ Enhanced variant selection with dynamic pricing ============
    async function selectVariant(btn) {
        try {
            const id = btn.getAttribute('data-variant-id');
            const variantPrice = parseFloat(btn.getAttribute('data-variant-price'));
            const variantOldPrice = btn.getAttribute('data-variant-old-price');

            if (!id) return;

            // Update price immediately for better UX
            updatePrice(variantPrice, variantOldPrice);

            const res = await fetch(`/product/variant-data/${id}`);
            if (!res.ok) return;
            const data = await res.json();

            // ✅ đổi ảnh chính + thumbnails (hỗ trợ object {url, descriptionImg})
            if (data?.images?.length) {
                const first = typeof data.images[0] === 'string' ? data.images[0] : data.images[0].url;
                document.getElementById('mainImg').src = first;
                renderThumbs(data.images);
                updateImageCounter(data.images.length);
            }

            // đổi Variant SKU
            const variantSkuSpan = document.getElementById('variantSku');
            if (variantSkuSpan && data?.variantSku) {
                variantSkuSpan.textContent = `• Variant: ${data.variantSku}`;
            }

            // highlight nút đang chọn với animation
            document.querySelectorAll('[data-variant-id]')
                .forEach(b => {
                    b.classList.remove('border-orange-500', 'ring-2', 'ring-orange-200', 'bg-orange-50');
                    b.classList.add('border-gray-200');
                });
            btn.classList.remove('border-gray-200');
            btn.classList.add('border-orange-500', 'ring-2', 'ring-orange-200', 'bg-orange-50');

            // ✅ render option values (đã camelCase)
            renderOptions(data.options);

            // Update financing info
            updateFinancing(variantPrice);

        } catch (e) {
            console.error(e);
        }
    }

    // ============ Dynamic Price Update ============
    function updatePrice(price, oldPrice) {
        const currentPriceEl = document.getElementById('currentPrice');
        const oldPriceEl = document.getElementById('oldPrice');

        if (currentPriceEl) {
            const currency = '@Model.Currency';
            const wholePart = Math.trunc(price);
            const decimalPart = (price - wholePart).toFixed(2).substring(2).padEnd(2, '0');

            currentPriceEl.innerHTML = `
                <svg class="w-6 h-6 mt-1" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 1a2 2 0 0 1 2 2v1h1a3 3 0 0 1 0 6h-3v2h3a3 3 0 1 1 0 6h-1v1a2 2 0 1 1-4 0v-1H9a3 3 0 0 1 0-6h3v-2H9a3 3 0 0 1 0-6h1V3a2 2 0 0 1 2-2Z"/>
                </svg>
                ${currency}${wholePart}<span class="text-base align-super">.${decimalPart}</span>
            `;
        }

        if (oldPrice && oldPriceEl) {
            oldPriceEl.textContent = `@Model.Currency${parseFloat(oldPrice).toFixed(2)}`;
            oldPriceEl.style.display = 'block';
        } else if (oldPriceEl) {
            oldPriceEl.style.display = 'none';
        }
    }

    // ============ Update Financing Info ============
    function updateFinancing(price) {
        const financingEl = document.querySelector('.financing-info');
        if (financingEl) {
            const monthlyPayment = (price / 4).toFixed(2);
            financingEl.innerHTML = `
                Pay in 4 interest-free payments of
                <span class="font-semibold">@Model.Currency${monthlyPayment}</span>
            `;
        }
    }

    // ============ Update Image Counter ============
    function updateImageCounter(total) {
        const counterEl = document.getElementById('imageCounter');
        const totalEl = document.getElementById('totalImages');
        if (counterEl) counterEl.textContent = '1';
        if (totalEl) totalEl.textContent = total;
    }

    // ===================== Enhanced Render thumbnails =====================
    function renderThumbs(items) {
        const wrap = document.getElementById('thumbs');
        if (!wrap) return;
        wrap.innerHTML = '';

        items.forEach((it, idx) => {
            const url = (typeof it === 'string') ? it : it.url;
            const desc = (typeof it === 'string') ? '' : (it.descriptionImg || '');

            const btn = document.createElement('button');
            btn.className = 'flex-shrink-0 rounded-xl border-2 border-gray-200 bg-white hover:border-orange-500 hover:shadow-md transition-all duration-200 overflow-hidden group';
            btn.onclick = () => {
                const main = document.getElementById('mainImg');
                if (main) {
                    main.src = url;
                    updateImageCounter(items.length, idx + 1);
                }
            };

            const img = document.createElement('img');
            img.src = url;
            img.alt = 'thumb ' + idx;
            img.className = 'w-20 h-16 object-cover group-hover:scale-105 transition-transform duration-200';

            btn.appendChild(img);

            // ✅ thêm mô tả (nếu có)
            if (desc) {
                const cap = document.createElement('div');
                cap.className = 'px-2 py-1 text-[10px] leading-tight text-gray-500 bg-gray-50';
                cap.textContent = desc;
                btn.appendChild(cap);
            }

            wrap.appendChild(btn);
        });
    }

    // ============ Update Image Counter with current index ============
    function updateImageCounter(total, current = 1) {
        const counterEl = document.getElementById('imageCounter');
        const totalEl = document.getElementById('totalImages');
        if (counterEl) counterEl.textContent = current;
        if (totalEl) totalEl.textContent = total;
    }

    // ===================== Render OptionValues =====================
    function renderOptions(options) {
        const wrap = document.getElementById("optionsWrap");
        wrap.innerHTML = "";

        if (!options || !options.length) return;

        const grouped = {};
        options.forEach(o => {
            const key = o.optionTypeName || o.OptionTypeName;  // phòng khi data cũ
            const val = o.value || o.Value;
            if (!grouped[key]) grouped[key] = [];
            if (!grouped[key].includes(val)) grouped[key].push(val);
        });

        for (const type in grouped) {
            const div = document.createElement("div");
            div.className = "mt-3";
            div.innerHTML = `<div class="font-medium text-sm mb-1">${type}</div>`;

            const list = document.createElement("div");
            list.className = "flex gap-2 flex-wrap";

            grouped[type].forEach(val => {
                const btn = document.createElement("button");
                btn.className = "px-3 py-1 border rounded-lg text-sm hover:bg-blue-50";
                btn.innerText = val;

                btn.onclick = () => {
                    [...list.children].forEach(b => b.classList.remove("border-blue-600", "bg-blue-50"));
                    btn.classList.add("border-blue-600", "bg-blue-50");
                };

                list.appendChild(btn);
            });

            div.appendChild(list);
            wrap.appendChild(div);
        }
    }

    // ===================== Auto-load variant đang được chọn khi mở trang =====================
    document.addEventListener("DOMContentLoaded", () => {
        const activeBtn =
            document.querySelector('[data-variant-id].ring-2') ||
            document.querySelector(`[data-variant-id="@Model.VariantId"]`) ||
            document.querySelector('[data-variant-id]');

        if (activeBtn) {
            // Gọi luôn để lấy images (kèm description) & options mới nhất
            selectVariant(activeBtn);
        } else {
            // Fallback: nếu không có variant button thì render từ Model.Images (chuỗi)
            const initImages = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Images ?? new List<string>()));
            if (initImages.length) {
                renderThumbs(initImages);
            }
        }
    });

    // ============ Image Modal Functions ============
    function openImageModal() {
        const modal = document.getElementById('imageModal');
        const modalImg = document.getElementById('modalImage');
        const mainImg = document.getElementById('mainImg');

        if (modal && modalImg && mainImg) {
            modalImg.src = mainImg.src;
            modal.classList.remove('hidden');
            modal.classList.add('flex');
            document.body.style.overflow = 'hidden';
        }
    }

    function closeImageModal() {
        const modal = document.getElementById('imageModal');
        if (modal) {
            modal.classList.add('hidden');
            modal.classList.remove('flex');
            document.body.style.overflow = 'auto';
        }
    }

    // Close modal on escape key
    document.addEventListener('keydown', function (e) {
        if (e.key === 'Escape') {
            closeImageModal();
        }
    });

    // Close modal on background click
    document.getElementById('imageModal')?.addEventListener('click', function (e) {
        if (e.target === this) {
            closeImageModal();
        }
    });
</script>