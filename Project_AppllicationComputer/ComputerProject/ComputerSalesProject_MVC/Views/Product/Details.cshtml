@using System.Text.RegularExpressions
@using System.Globalization
@using Microsoft.AspNetCore.Html
@model ProductDetailViewModel
@{
    ViewData["Title"] = Model.Title;

    var inv = CultureInfo.InvariantCulture; 

    var bullets = (Model.OverviewText ?? "")
    .Split(new[] { "\r\n", "\n" }, StringSplitOptions.RemoveEmptyEntries)
    .Take(8).ToList();
}
<script src="https://cdn.tailwindcss.com"></script>

<main class="max-w-[1320px] xl:max-w-[1400px] mx-auto px-3 lg:px-4 py-6">

    <!-- Breadcrumb -->
    <nav class="text-sm text-gray-500 mb-3 flex items-center gap-1">
        <svg class="w-4 h-4 text-gray-400" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
            <path
                d="M10.707 2.293a1 1 0 0 0-1.414 0L2.586 9H1a1 1 0 1 0 0 2h1v9a2 2 0 0 0 2 2h6v-7h4v7h6a2 2 0 0 0 2-2v-9h1a1 1 0 1 0 0-2h-1.586l-6.707-6.707a1 1 0 0 0-1.414 0L12 3.586l-1.293-1.293Z" />
        </svg>
        <a href="/" class="hover:underline">Home</a>
        <span>›</span>
        <a href="/gaming" class="hover:underline">Gaming & VR</a>
        <span>›</span>
        <a href="/gaming/monitors" class="hover:underline">Gaming Monitor</a>
        <span>›</span>
        <span class="text-gray-700 truncate" title="@Model.Title">@Model.Title</span>
    </nav>

    <!-- 3 COLUMNS -->
    <section class="grid grid-cols-1 lg:grid-cols-12 gap-6 items-start">

        <!-- LEFT: Gallery -->
        <div class="col-span-1 lg:col-span-6">
            <div class="bg-white rounded-2xl p-4 shadow">
                <div class="aspect-[16/10] bg-white rounded-xl overflow-hidden flex items-center justify-center border">
                    <img id="mainImg" src="@(Model.Images?.FirstOrDefault() ?? "/images/placeholder.svg")"
                        class="max-h-[70vh] w-auto object-contain" alt="@Model.Title" />
                </div>
                <div id="thumbs" class="mt-3 flex flex-wrap gap-2"></div>
            </div>
        </div>

        <!-- MIDDLE: Info -->
        <div class="col-span-1 lg:col-span-3">
            <div class="bg-white rounded-2xl p-4 sm:p-5 shadow">
                <div class="flex items-center gap-2 mb-1">
                    <img src="https://upload.wikimedia.org/wikipedia/commons/2/2f/ASUS_Logo.svg" class="h-5 w-auto"
                        alt="brand" />
                    <a class="text-blue-700 text-sm font-semibold hover:underline inline-flex items-center gap-1"
                        href="#">
                        <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
                            <path d="M3 6a3 3 0 0 1 3-3h5l2 2h5a3 3 0 0 1 3 3v1H3V6Z" />
                            <path d="M3 10h18v7a3 3 0 0 1-3 3H6a3 3 0 0 1-3-3v-7Z" />
                        </svg>
                        Shop All ASUS ROG
                    </a>
                </div>

                <h1 class="text-2xl font-bold leading-snug">@Model.Title</h1>

                @if (Model.Variants?.Any() == true)
                {
                    <div class="mt-3">
                        <div class="text-sm font-medium mb-2">Chọn phiên bản</div>
                        <div class="flex flex-wrap gap-2">
                            @foreach (var v in Model.Variants)
                            {
                                <button type="button"
                                    class="px-3 py-2 rounded-lg border text-sm bg-white
                                                               hover:border-blue-500 hover:bg-blue-50 transition
                                                               @(Model.VariantId == v.VariantId ? "border-blue-600 ring-2 ring-blue-200" : "border-gray-300")"
                                    data-variant-id="@v.VariantId" data-variant-price="@v.Price"
                                    data-variant-old-price="@(v.OldPrice?.ToString() ?? "")" onclick="selectVariant(this)">
                                    @v.SKU
                                </button>
                            }
                        </div>
                    </div>
                }

                <div id="optionsWrap" class="mt-4">
                    @if (Model.OptionGroups?.Any() == true)
                    {
                        @foreach (var group in Model.OptionGroups)
                        {
                            var isAddOn =
                                group.Items.Any(x => x.Price > 0) ||
                                Regex.IsMatch(group.Name ?? "", "(?i)add[- ]?on|optional");

                            <div class="mt-3">
                                <div class="text-sm font-medium mb-1">@group.Name</div>
                                <div class="flex gap-2 flex-wrap">
                                    @foreach (var item in group.Items)
                                    {
                                        <button type="button"
                                                class="px-3 py-1 border rounded-lg text-sm hover:bg-blue-50 transition-colors"
                                                data-option-price="@item.Price"
                                                @(isAddOn
                                                  ? new HtmlString($"data-optional-id=\"{item.Id}\"")
                                                  : new HtmlString($"data-option-id=\"{item.Id}\""))
                                                onclick="selectOption(this, '@group.Name', '@item.Label')">
                                          @item.Label
                                        </button>
                                    }
                                </div>
                            </div>
                        }  
                    }
                </div>

                <div class="mt-2 text-sm text-gray-500 flex gap-2 flex-wrap">
                    <span>Item#: @Model.SKU</span>
                    @if (!string.IsNullOrWhiteSpace(Model.VariantSku))
                    {
                        <span id="variantSku">• Variant: @Model.VariantSku</span>
                    }
                </div>

                <div class="mt-2 inline-flex items-center gap-2 text-xs text-blue-700">
                    <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                        <path
                            d="M12 2 15.09 8.26 22 9.27l-5 4.87L18.18 22 12 18.77 5.82 22 7 14.14l-5-4.87 6.91-1.01L12 2Z" />
                    </svg>
                    Recently Launched
                </div>

                <hr class="my-4" />

                <ul class="space-y-2 text-[15px] text-gray-800 pl-1">
                    @if (bullets.Count > 0)
                    {
                        foreach (var line in bullets)
                        {
                            <li class="flex gap-2">
                                <svg class="w-5 h-5 mt-0.5 shrink-0 text-green-600" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" />
                                </svg>
                                <span>@line</span>
                            </li>
                        }
                    }
                    else
                    {
                        <li class="flex gap-2"><svg class="w-5 h-5 mt-0.5 text-green-600" viewBox="0 0 24 24"
                                fill="currentColor">
                                <path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" />
                            </svg><span>4K 240Hz / FHD 480Hz dual-mode OLED.</span></li>
                        <li class="flex gap-2"><svg class="w-5 h-5 mt-0.5 text-green-600" viewBox="0 0 24 24"
                                fill="currentColor">
                                <path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" />
                            </svg><span>2× HDMI 2.1 + 1× DisplayPort 1.4.</span></li>
                        <li class="flex gap-2"><svg class="w-5 h-5 mt-0.5 text-green-600" viewBox="0 0 24 24"
                                fill="currentColor">
                                <path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" />
                            </svg><span>TrueBlack glossy panel, ultra-sharp imagery.</span></li>
                        <li class="flex gap-2"><svg class="w-5 h-5 mt-0.5 text-green-600" viewBox="0 0 24 24"
                                fill="currentColor">
                                <path d="M9 16.2 4.8 12l-1.4 1.4L9 19l12-12-1.4-1.4z" />
                            </svg><span>VESA DisplayHDR™ 400 True Black, DCI-P3 99%.</span></li>
                    }
                </ul>
            </div>

            @if (!string.IsNullOrWhiteSpace(Model.OverviewText))
            {
                <div class="bg-white rounded-2xl p-4 sm:p-5 shadow mt-4">
                    <h2 class="text-lg font-semibold mb-2 text-gray-800 inline-flex items-center gap-2">
                        <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M4 6h16v2H4zM4 11h16v2H4zM4 16h10v2H4z" />
                        </svg>
                        Product details
                    </h2>
                    <div class="prose max-w-none text-gray-800 leading-relaxed">
                        @Html.Raw(Html.Encode(Model.OverviewText).Replace("\r\n", "<br/>").Replace("\n", "<br/>"))
                    </div>
                </div>
            }

            @foreach(var overviewItems in Model.OverviewBlocks)
            {
                if(!string.IsNullOrWhiteSpace(overviewItems.TextContent))
                {
                    <div class="bg-white rounded-2xl p-4 sm:p-5 shadow mt-4">
                        <h2 class="text-lg font-semibold mb-2 text-gray-800 inline-flex items-center gap-2">
                            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M4 6h16v2H4zM4 11h16v2H4zM4 16h10v2H4z" />
                            </svg>
                            OverView Product 
                        </h2>
                        <div class="prose max-w-none text-gray-800 leading-relaxed">
                            @Html.Raw(overviewItems.TextContent)
                        </div>
                    </div>
                }
            }
        </div>

        <!-- RIGHT: Price panel -->
        <aside class="col-span-1 lg:col-span-3">
            <div class="bg-white rounded-2xl p-4 sm:p-5 shadow sticky top-20">
                <div class="flex flex-col gap-2">
                    <div id="currentPrice"
                        class="text-4xl font-extrabold text-gray-900 flex items-baseline gap-1 flex-wrap">
                        <svg class="w-6 h-6 mt-1 flex-shrink-0" viewBox="0 0 24 24" fill="currentColor"
                            aria-hidden="true">
                            <path
                                d="M12 1a2 2 0 0 1 2 2v1h1a3 3 0 0 1 0 6h-3v2h3a3 3 0 1 1 0 6h-1v1a2 2 0 1 1-4 0v-1H9a3 3 0 0 1 0-6h3v-2H9a3 3 0 0 1 0-6h1V3a2 2 0 0 1 2-2Z" />
                        </svg>
                        <span class="break-all">
                            @Model.Currency@Math.Truncate(Model.Price)
                            <span class="text-base align-super">
                                @{
                                    var cents = (Model.Price - Math.Truncate(Model.Price));
                                    var tail = (cents == 0 ? "00" : (cents.ToString("0.##").Replace("0.", "")).PadRight(2,
                                    '0'));
                                }
                                .@tail
                            </span>
                        </span>
                    </div>

                    @if (Model.OldPrice.HasValue && Model.OldPrice.Value > Model.Price)
                    {
                        <div id="oldPrice" class="text-gray-400 line-through text-lg">
                            @Model.Currency@Model.OldPrice.Value.ToString("0.##")
                        </div>
                    }
                    else
                    {
                        <div id="oldPrice" style="display:none"></div>
                    }
                </div>

                <div class="mt-2 text-xs text-gray-600 financing-info">
                    Pay in 4 interest-free payments of
                    <span class="font-semibold break-all">
                        @Model.Currency@(Math.Truncate((Model.Price / 4m)))
                        @{
                            var finCents = ((Model.Price / 4m) - Math.Truncate((Model.Price / 4m)));
                            var finTail = (finCents == 0 ? "00" : (finCents.ToString("0.##").Replace("0.", "")).PadRight(2,
                            '0'));
                        }
                        .<span class="text-xs">@finTail</span>
                    </span>
                </div>

                <div class="mt-4 inline-flex items-center rounded-full border overflow-hidden">
                    <button class="w-9 h-9 grid place-items-center hover:bg-gray-50" onclick="chgQty(-1)"
                        aria-label="Decrease">
                        <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M5 11h14v2H5z" />
                        </svg>
                    </button>
                    <input id="qty" class="w-12 text-center outline-none" type="text" value="1" />
                    <button class="w-9 h-9 grid place-items-center hover:bg-gray-50" onclick="chgQty(1)"
                        aria-label="Increase">
                        <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M11 5h2v14h-2z" />
                            <path d="M5 11h14v2H5z" />
                        </svg>
                    </button>
                </div>

                <form id="addForm" asp-controller="Cart" asp-action="Add" method="post" class="mt-4">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="productId" value="@Model.ProductId" />
                    <input type="hidden" id="hidVariantId" name="productVariantId" value="@Model.VariantId" />
                    <input type="hidden" id="hidQty" name="qty" value="1" />
                    <input type="hidden" id="hidOptionalValueId" name="optionalValueId" value="">

                    <button type="submit"
                        class="mt-4 w-full rounded-full bg-[#f7a928] hover:bg-[#e1981e] text-[#0b2f63] font-semibold py-3 inline-flex items-center justify-center gap-2">
                        <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor"><path d="M3 3h2l.4 2M7 13h10l3-8H6.4M7 13L5.4 5M7 13l-2 7h2l2-7m8 0l2 7h2l-2-7" /></svg>
                        Add to cart
                    </button>
                </form>
            </div>
        </aside>
    </section>
</main>


<script>
  let currentVariantPrice = @Model.Price;
  let currentOldPrice = @Model.OldPrice ?? 0;

  let selectedOptions = {};               
  let selectedAddon = { id: null, price: 0 }; 


  function selectVariant(btn){
    const id = btn.getAttribute('data-variant-id');
    if(!id) return;

    document.getElementById('hidVariantId').value = id;

    // reset highlight
    document.querySelectorAll('[data-variant-id]')
      .forEach(b => b.classList.remove('border-blue-600','ring-2','ring-blue-200','bg-blue-50'));
    btn.classList.add('border-blue-600','ring-2','ring-blue-200','bg-blue-50');

    // reset state khi đổi variant
    selectedOptions = {};
    selectedAddon = { id: null, price: 0 };
    document.getElementById('hidOptionalValueId').value = "";

    // giá tạm/chuẩn
    const p0 = parseFloat(btn.getAttribute('data-variant-price') || "0");
    const o0 = btn.getAttribute('data-variant-old-price');
    currentVariantPrice = p0;
    currentOldPrice = o0 ? parseFloat(o0) : 0;

    const total = currentVariantPrice + calculateOptionTotal() + selectedAddon.price;
    const oldTotal = currentOldPrice > 0 ? currentOldPrice + selectedAddon.price : null;
    updatePrice(total, oldTotal, '@Model.Currency');
  }



  function selectOption(btn, groupName, label){
    const price = parseFloat(btn.getAttribute('data-option-price') || '0');
    const optId = btn.getAttribute('data-optional-id'); // nếu có -> add-on

    if (optId) {
      // toggle add-on
      const isSame = selectedAddon.id === optId;

      // unhighlight siblings
      btn.parentElement.querySelectorAll('[data-optional-id]')
        .forEach(b => b.classList.remove('border-blue-600','bg-blue-50'));

      if (isSame) {
        selectedAddon = { id: null, price: 0 };
        document.getElementById('hidOptionalValueId').value = "";
      } else {
        selectedAddon = { id: optId, price: price };
        document.getElementById('hidOptionalValueId').value = optId;
        btn.classList.add('border-blue-600','bg-blue-50');
      }

      const total = currentVariantPrice + calculateOptionTotal() + selectedAddon.price;
      const oldTotal = currentOldPrice > 0 ? currentOldPrice + selectedAddon.price : null;
      updatePrice(total, oldTotal, '@Model.Currency');
      return;
    }

    // option cấu hình
    const isSelected = selectedOptions[groupName]?.label === label;
    if (isSelected) delete selectedOptions[groupName];
    else selectedOptions[groupName] = { label, price };

    // highlight trong nhóm
    [...btn.parentElement.children].forEach(b => b.classList.remove('border-blue-600','bg-blue-50'));
    if (!isSelected) btn.classList.add('border-blue-600','bg-blue-50');

    const total = currentVariantPrice + calculateOptionTotal() + selectedAddon.price;
    const oldTotal = currentOldPrice > 0 ? currentOldPrice + selectedAddon.price : null;
    updatePrice(total, oldTotal, '@Model.Currency');
  }

  function calculateOptionTotal(){
    return Object.values(selectedOptions).reduce((s, o) => s + (o.price || 0), 0);
  }

  function updatePrice(price, oldPrice, currency){ /* … giữ nguyên hàm bạn đang có … */ }

  // qty
  function chgQty(delta){
    const el = document.getElementById('qty');
    const v = Math.max(1, (parseInt(el.value || "1") || 1) + delta);
    el.value = v;
    document.getElementById('hidQty').value = String(v);
  }

  document.addEventListener("DOMContentLoaded", () => {
      const activeBtn =
        document.querySelector('[data-variant-id].ring-2') ||
        document.querySelector(`[data-variant-id="@Model.VariantId"]`) ||
        document.querySelector('[data-variant-id]');
      if (activeBtn) selectVariant(activeBtn);
    });
</script>


