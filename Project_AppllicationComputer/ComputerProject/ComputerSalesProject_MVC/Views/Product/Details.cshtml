@using System.Globalization
@using System.Text.RegularExpressions
@using ComputerSalesProject_MVC.Models.Product_ViewModel
@using Microsoft.AspNetCore.Html
@model ProductDetailViewModel
@{
    ViewData["Title"] = Model.Title;
    // Layout = ~
    var inv = CultureInfo.InvariantCulture;

    var bullets = (Model.OverviewText ?? "")
    .Split(new[] { "\r\n", "\n" }, StringSplitOptions.RemoveEmptyEntries)
    .Take(8).ToList();
}
<main class="max-w-[1320px] xl:max-w-[1400px] mx-auto px-3 lg:px-4 py-8 bg-gray-50 min-h-screen">
    <!-- Breadcrumb -->
    <nav class="text-sm text-gray-500 mb-6 flex items-center gap-2 bg-white rounded-lg px-4 py-3 shadow-sm border border-gray-200">
        <div class="flex items-center gap-2 text-gray-600">
            <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
                <path d="M10.707 2.293a1 1 0 0 0-1.414 0L2.586 9H1a1 1 0 1 0 0 2h1v9a2 2 0 0 0 2 2h6v-7h4v7h6a2 2 0 0 0 2-2v-9h1a1 1 0 1 0 0-2h-1.586l-6.707-6.707a1 1 0 0 0-1.414 0L12 3.586l-1.293-1.293Z" />
            </svg>
            <a href="/" class="hover:text-gray-800 hover:underline transition-colors duration-200">Trang chủ</a>
        </div>
        <svg class="w-4 h-4 text-gray-400" viewBox="0 0 24 24" fill="currentColor">
            <path d="M8.59 16.59L13.17 12L8.59 7.41L10 6l6 6-6 6-1.41-1.41z"/>
        </svg>
        <span class="text-gray-700 truncate font-medium" title="@Model.Title">@Model.Title</span>
    </nav>

    <!-- 3 COLUMNS -->
    <section class="grid grid-cols-1 lg:grid-cols-12 gap-6 items-start">

        <!-- LEFT: Gallery -->
        <div class="col-span-1 lg:col-span-6">
            <div class="bg-white rounded-lg p-4 shadow-sm border border-gray-200 hover:shadow-md transition-shadow duration-200">
                <div class="aspect-[16/10] bg-gray-50 rounded-lg overflow-hidden flex items-center justify-center border border-gray-200 relative">
                    <img id="mainImg" src="@(Model.Images?.FirstOrDefault() ?? "/images/placeholder.svg")"
                         class="max-h-[40vh] w-auto object-contain cursor-zoom-in" alt="@Model.Title" />
                    <!-- Zoom icon overlay -->
                    <div class="absolute top-3 right-3 bg-white rounded-full p-2 opacity-0 hover:opacity-100 transition-opacity duration-200 shadow-sm">
                        <svg class="w-4 h-4 text-gray-600" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                        </svg>
                    </div>
                </div>
                <div id="thumbs" class="mt-3 flex flex-wrap gap-2"></div>
            </div>
        </div>

        <!-- MIDDLE: Info -->
        <div class="col-span-1 lg:col-span-3">
            <div class="bg-white rounded-lg p-5 shadow-sm border border-gray-200">
                <h1 class="text-2xl font-semibold leading-tight text-gray-900 mb-4">@Model.Title</h1>

                @* lấy các Option Product Variant có bên trong dựa theo ProductId *@
                @if (Model.Variants?.Any() == true)
                {
                    <div class="mt-4">
                        <div class="text-sm font-medium mb-3 text-gray-700">
                            Chọn phiên bản
                        </div>
                        <div class="flex flex-wrap gap-2">
                            @foreach (var v in Model.Variants)
                            {
                                <button type="button"
                                        class="px-3 py-2 rounded-md border text-sm bg-white font-medium
                                                                       hover:border-gray-400 hover:bg-gray-50 transition-colors duration-200
                                                                       @(Model.VariantId == v.VariantId ? "border-gray-400 bg-gray-50" : "border-gray-300")"
                                        data-variant-id="@v.VariantId" data-variant-price="@v.Price"
                                        data-variant-old-price="@(v.OldPrice?.ToString() ?? "")" onclick="selectVariant(this)">
                                    @v.VariantName
                                </button>
                            }
                        </div>
                    </div>
                }

                <div id="optionsWrap" class="mt-4">
                    @if (Model.OptionGroups?.Any() == true)
                    {
                        @foreach (var group in Model.OptionGroups)
                        {
                            var isAddOn =
                            group.Items.Any(x => x.Price > 0) ||
                            Regex.IsMatch(group.Name ?? "", "(?i)add[- ]?on|optional");

                            <div class="mt-4">
                                <div class="text-sm font-medium mb-2 text-gray-700">
                                    @group.Name
                                </div>
                                <div class="flex gap-2 flex-wrap">
                                    @foreach (var item in group.Items)
                                    {
                                        <button type="button"
                                                class="px-3 py-2 border rounded-md text-sm font-medium bg-white hover:bg-gray-50 hover:border-gray-400 transition-colors duration-200 border-gray-300"
                                                data-option-price="@item.Price"
                                                @(isAddOn ? new HtmlString($"data-optional-id=\"{item.Id}\"")
                                                                                    : new HtmlString($"data-option-id=\"{item.Id}\""))
                                    onclick="selectOption(this, '@group.Name', '@item.Label')">
                                @item.Label
                                @if (item.Price > 0)
                                {
                                    <span class="ml-1 text-xs text-gray-600 font-medium">+@item.Price.ToString("N0")đ</span>
                                }
                            </button>
                                                        }
                                </div>
                            </div>
                        }
                    }
                </div>

                <!-- Wrapped Product Information Block -->
                <div class="bg-gray-50 rounded-lg p-4 border border-gray-200 mt-4">
                    <!-- Recently Launched Badge -->
                    <div class="inline-flex items-center gap-2 text-xs text-gray-600 mb-4 bg-white rounded-md px-3 py-1 border border-gray-200">
                        <svg class="w-3 h-3 text-gray-500" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2 15.09 8.26 22 9.27l-5 4.87L18.18 22 12 18.77 5.82 22 7 14.14l-5-4.87 6.91-1.01L12 2Z" />
                        </svg>
                        <span class="font-medium">Mới ra mắt</span>
                    </div>

                    <!-- Product Details -->
                    @if (!string.IsNullOrWhiteSpace(Model.OverviewText))
                    {
                        <div class="mb-4">
                            <h2 class="text-lg font-semibold mb-2 text-gray-800">
                                Chi tiết sản phẩm
                            </h2>
                            <div class="prose max-w-none text-gray-700 leading-relaxed bg-white rounded-md p-3 border border-gray-200">
                                @Html.Raw(Html.Encode(Model.OverviewText).Replace("\r\n", "<br/>").Replace("\n", "<br/>"))
                            </div>
                        </div>
                    }

                    <!-- Additional Product Information -->
                    @foreach (var overviewItems in Model.OverviewBlocks)
                    {
                        if (!string.IsNullOrWhiteSpace(overviewItems.TextContent))
                        {
                            <div class="mb-4">
                                <h2 class="text-lg font-semibold mb-2 text-gray-800">
                                    Thông tin mô tả
                                </h2>
                                <div class="prose max-w-none text-gray-700 leading-relaxed bg-white rounded-md p-3 border border-gray-200">
                                    @Html.Raw(overviewItems.TextContent)
                                </div>
                            </div>
                        }
                    }
                </div>

            </div>


        </div>

        <!-- RIGHT: Price panel -->
        <aside class="col-span-1 lg:col-span-3">
            <div class="bg-white rounded-lg p-5 shadow-sm border border-gray-200 sticky top-20">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Giá sản phẩm</h3>

                <div class="flex flex-col gap-2">
                    <div id="currentPrice"
                         class="text-3xl font-bold text-gray-900 flex items-baseline gap-1 flex-wrap">
                        <span class="text-lg font-medium text-gray-600">@Model.Currency</span>
                        <span class="break-all">
                            @Math.Truncate(Model.Price)
                            <span class="text-base align-super">
                                @{
                                    var cents = (Model.Price - Math.Truncate(Model.Price));
                                    var tail = (cents == 0 ? "00" : (cents.ToString("0.##").Replace("0.", "")).PadRight(2,
                                    '0'));
                                }
                                .@tail
                            </span>
                        </span>
                    </div>

                    @if (Model.OldPrice.HasValue && Model.OldPrice.Value > Model.Price)
                    {
                        <div id="oldPrice" class="text-gray-400 line-through text-lg flex items-baseline gap-1">
                            <span class="text-sm">@Model.Currency</span>
                            <span>@Model.OldPrice.Value.ToString("0.##")</span>
                        </div>
                    }
                    else
                    {
                        <div id="oldPrice" style="display:none"></div>
                    }
                </div>

                <div class="mt-3 text-sm text-gray-600 financing-info bg-gray-50 rounded-md p-3 border border-gray-200">
                    <div class="font-medium text-gray-700 mb-1">Trả góp 0% lãi suất</div>
                    <div class="text-xs text-gray-600">
                        Chia thành 4 đợt thanh toán, mỗi đợt
                        <span class="font-semibold text-gray-800 break-all">
                            @Model.Currency@(Math.Truncate((Model.Price / 4m)))
                            @{
                                var finCents = ((Model.Price / 4m) - Math.Truncate((Model.Price / 4m)));
                                var finTail = (finCents == 0 ? "00" : (finCents.ToString("0.##").Replace("0.", "")).PadRight(2,'0'));
                            }
                            .<span class="text-xs">@finTail</span>
                        </span>
                    </div>
                </div>

                <div class="mt-4">
                    <div class="text-sm font-medium text-gray-700 mb-2">Số lượng</div>
                    <div class="inline-flex items-center rounded-md border border-gray-300 overflow-hidden bg-white">
                        <button class="w-8 h-8 grid place-items-center hover:bg-gray-50 transition-colors duration-200" onclick="chgQty(-1)"
                                aria-label="Giảm số lượng">
                            <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M5 11h14v2H5z" />
                            </svg>
                        </button>
                        <input id="qty" class="w-12 text-center outline-none font-medium text-gray-800" type="number" value="1" min="1" max="3" onchange="validateQuantity()" />
                        <button class="w-8 h-8 grid place-items-center hover:bg-gray-50 transition-colors duration-200" onclick="chgQty(1)"
                                aria-label="Tăng số lượng">
                            <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M11 5h2v14h-2z" />
                                <path d="M5 11h14v2H5z" />
                            </svg>
                        </button>
                    </div>
                </div>

                <form id="addForm" asp-controller="Cart" asp-action="Add" method="post" class="mt-4">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="productId" value="@Model.ProductId" />
                    <input type="hidden" id="hidVariantId" name="productVariantId" value="@Model.VariantId" />
                    <input type="hidden" id="hidQty" name="qty" value="1" />
                    <input type="hidden" id="hidOptionalValueId" name="optionalValueId" value="">

                    <button type="submit"
                            class="w-full rounded-md bg-gray-900 hover:bg-gray-800 text-white font-semibold py-3 inline-flex items-center justify-center gap-2 transition-colors duration-200">
                        <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M3 3h2l.4 2M7 13h10l3-8H6.4M7 13L5.4 5M7 13l-2 7h2l2-7m8 0l2 7h2l-2-7" />
                        </svg>
                        Thêm vào giỏ hàng
                    </button>
                </form>
            </div>
        </aside>
    </section>
</main>


<script>
    let currentVariantPrice = @Model.Price;
    let currentOldPrice = @Model.OldPrice ?? 0;
    let selectedOptions = {};
    let selectedAddon = { id: null, price: 0 };

    // ✅ Khi chọn 1 Variant
    function selectVariant(btn) {
        const id = btn.getAttribute('data-variant-id');
        if (!id) return;

        document.getElementById('hidVariantId').value = id;

        // reset highlight
        document.querySelectorAll('[data-variant-id]')
            .forEach(b => b.classList.remove('border-gray-400','bg-gray-50'));
        btn.classList.add('border-gray-400','bg-gray-50');

        // reset state khi đổi variant
        selectedOptions = {};
        selectedAddon = { id: null, price: 0 };
        document.getElementById('hidOptionalValueId').value = "";

        // lấy giá variant
        const p0 = parseFloat(btn.getAttribute('data-variant-price') || "0");
        const o0 = parseFloat(btn.getAttribute('data-variant-old-price') || "0");
        currentVariantPrice = p0;
        currentOldPrice = o0;

        // Tự động load ảnh variant khi chọn
        loadVariantImages(id);

        updateFinalPrice();
    }

    // ✅ Khi chọn option hoặc add-on
    function selectOption(btn, groupName, label) {
        const price = parseFloat(btn.getAttribute('data-option-price') || '0');
        const optId = btn.getAttribute('data-optional-id'); // add-on

        if (optId) {
            const isSame = selectedAddon.id === optId;
            btn.parentElement.querySelectorAll('[data-optional-id]')
                .forEach(b => b.classList.remove('border-gray-400','bg-gray-50'));

            if (isSame) {
                selectedAddon = { id: null, price: 0 };
                document.getElementById('hidOptionalValueId').value = "";
            } else {
                selectedAddon = { id: optId, price: price };
                document.getElementById('hidOptionalValueId').value = optId;
                btn.classList.add('border-gray-400','bg-gray-50');
            }
            updateFinalPrice();
            return;
        }

        // option cấu hình (RAM, SSD, ...)
        const isSelected = selectedOptions[groupName]?.label === label;
        if (isSelected) delete selectedOptions[groupName];
        else selectedOptions[groupName] = { label, price };

        [...btn.parentElement.children].forEach(b => b.classList.remove('border-gray-400','bg-gray-50'));
        if (!isSelected) btn.classList.add('border-gray-400','bg-gray-50');

        updateFinalPrice();
    }

    // ✅ Hàm tính tổng giá
    function calculateOptionTotal() {
        return Object.values(selectedOptions).reduce((s, o) => s + (o.price || 0), 0);
    }

    function updateFinalPrice() {
        const total = currentVariantPrice + calculateOptionTotal() + selectedAddon.price;
        const oldTotal = currentOldPrice > 0 ? currentOldPrice + calculateOptionTotal() + selectedAddon.price : null;
        updatePrice(total, oldTotal, '@Model.Currency');
    }

    // ✅ Cập nhật hiển thị giá
    function updatePrice(price, oldPrice, currency) {
        const priceEl = document.getElementById('currentPrice');
        const oldEl = document.getElementById('oldPrice');

        priceEl.innerHTML = `<span class="text-lg font-semibold text-gray-600">${currency}</span><span class="break-all">${price.toLocaleString('vi-VN')}</span>`;
        if (oldPrice && oldPrice > price) {
            oldEl.style.display = '';
            oldEl.innerHTML = `<span class="text-sm">${currency}</span><span>${oldPrice.toLocaleString('vi-VN')}</span>`;
        } else {
            oldEl.style.display = 'none';
        }
    }

    // ✅ Số lượng với giới hạn tối đa 3
    function chgQty(delta) {
        const el = document.getElementById('qty');
        const currentValue = parseInt(el.value || "1") || 1;
        const newValue = currentValue + delta;
        
        // Giới hạn từ 1 đến 3
        const v = Math.max(1, Math.min(3, newValue));
        el.value = v;
        document.getElementById('hidQty').value = String(v);
        
        // Hiển thị thông báo nếu đạt giới hạn
        if (v === 3 && delta > 0) {
            showLimitMessage();
        }
    }
    
    // ✅ Hiển thị thông báo giới hạn
    function showLimitMessage() {
        // Tạo thông báo tạm thời
        const message = document.createElement('div');
        message.className = 'fixed top-4 right-4 bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded-lg shadow-lg z-50';
        message.innerHTML = `
            <div class="flex items-center">
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                </svg>
                Tối đa 3 sản phẩm mỗi lần mua
            </div>
        `;
        
        document.body.appendChild(message);
        
        // Tự động ẩn sau 3 giây
        setTimeout(() => {
            message.remove();
        }, 3000);
    }
    
    // ✅ Kiểm tra số lượng khi nhập thủ công
    function validateQuantity() {
        const el = document.getElementById('qty');
        const value = parseInt(el.value) || 1;
        
        // Giới hạn từ 1 đến 3
        const validValue = Math.max(1, Math.min(3, value));
        el.value = validValue;
        document.getElementById('hidQty').value = String(validValue);
        
        // Hiển thị thông báo nếu vượt quá giới hạn
        if (value > 3) {
            showLimitMessage();
        }
    }

    // ✅ Khi load trang → chọn variant đầu tiên
    document.addEventListener("DOMContentLoaded", () => {
        const activeBtn =
          document.querySelector('[data-variant-id].ring-2') ||
          document.querySelector(`[data-variant-id="@Model.VariantId"]`) ||
          document.querySelector('[data-variant-id]');
        if (activeBtn) selectVariant(activeBtn);
    });

    // ✅ Load ảnh cho từng variant
    async function loadVariantImages(variantId) {
        const thumbs = document.getElementById('thumbs');
        const mainImg = document.getElementById('mainImg');
        
        // Hiển thị loading state
        thumbs.innerHTML = '<div class="text-gray-500 flex items-center justify-center py-4"><div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mr-2"></div>Đang tải hình ảnh...</div>';
        
        // Thêm loading cho ảnh chính
        mainImg.style.opacity = '0.5';
        mainImg.style.transition = 'opacity 0.3s ease';

        try {
            const res = await fetch(`/product/variant-images/${variantId}`);
            const data = await res.json();

            if (data && data.length > 0) {
                // Cập nhật ảnh chính với ảnh đầu tiên
                mainImg.src = data[0].url;
                mainImg.alt = data[0].descriptionImg || '@Model.Title';
                
                // Tạo danh sách thumbnail
                thumbs.innerHTML = '';
                data.forEach((img, index) => {
                    const thumb = document.createElement('img');
                    thumb.src = img.url;
                    thumb.alt = img.descriptionImg || '@Model.Title';
                    thumb.className = 'h-16 w-16 rounded-md border border-gray-200 object-cover cursor-pointer hover:border-gray-400 transition-colors duration-200';
                    
                    // Đánh dấu ảnh đầu tiên là active
                    if (index === 0) {
                        thumb.classList.add('border-gray-400');
                    }
                    
                    thumb.onclick = () => {
                        // Thêm hiệu ứng fade cho ảnh chính
                        mainImg.style.opacity = '0.5';
                        mainImg.style.transition = 'opacity 0.3s ease';
                        
                        setTimeout(() => {
                            // Cập nhật ảnh chính
                            mainImg.src = img.url;
                            mainImg.alt = img.descriptionImg || '@Model.Title';
                            mainImg.style.opacity = '1';
                        }, 150);
                        
                        // Cập nhật trạng thái active của thumbnail
                        document.querySelectorAll('#thumbs img').forEach(x => {
                            x.classList.remove('border-gray-400');
                            x.classList.add('border-gray-200');
                        });
                        thumb.classList.add('border-gray-400');
                        thumb.classList.remove('border-gray-200');
                    };
                    
                    thumbs.appendChild(thumb);
                });
            } else {
                // Nếu không có ảnh, hiển thị placeholder
                thumbs.innerHTML = '<div class="text-gray-500 text-center py-4">Không có hình ảnh cho variant này</div>';
                mainImg.src = '/images/placeholder.svg';
                mainImg.alt = '@Model.Title';
            }
            
            // Khôi phục opacity của ảnh chính
            mainImg.style.opacity = '1';
            
        } catch (e) {
            console.error('Error loading variant images:', e);
            thumbs.innerHTML = '<div class="text-red-500 text-center py-4">Không tải được ảnh!</div>';
            mainImg.style.opacity = '1';
        }
    }

    // ✅ Zoom modal khi click ảnh chính
    const zoomModalHtml = `
      <div id="zoomModal" class="hidden fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4">
        <div class="relative max-h-[90vh] max-w-[90vw]">
          <img id="zoomedImg" class="max-h-[90vh] max-w-[90vw] rounded-lg shadow-lg object-contain" />
          <button id="closeZoom" class="absolute top-4 right-4 bg-white rounded-full p-2 hover:bg-gray-50 transition-colors duration-200 shadow-sm">
            <svg class="w-5 h-5 text-gray-600" viewBox="0 0 24 24" fill="currentColor">
              <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
            </svg>
          </button>
        </div>
      </div>`;
    document.body.insertAdjacentHTML('beforeend', zoomModalHtml);
    const zoomModal = document.getElementById('zoomModal');
    const zoomedImg = document.getElementById('zoomedImg');
    const closeZoom = document.getElementById('closeZoom');
    const mainImg = document.getElementById('mainImg');
    
    mainImg.addEventListener('click', () => {
        zoomedImg.src = mainImg.src;
        zoomedImg.alt = mainImg.alt;
        zoomModal.classList.remove('hidden');
        // Thêm hiệu ứng fade in
        zoomModal.style.opacity = '0';
        setTimeout(() => {
            zoomModal.style.opacity = '1';
            zoomModal.style.transition = 'opacity 0.3s ease';
        }, 10);
    });
    
    const closeModal = () => {
        zoomModal.style.opacity = '0';
        setTimeout(() => {
            zoomModal.classList.add('hidden');
        }, 300);
    };
    
    closeZoom.addEventListener('click', closeModal);
    zoomModal.addEventListener('click', (e) => {
        if (e.target === zoomModal) closeModal();
    });
</script>



